<!DOCTYPE html> <html> <head> <title>John CS - The Python Import System</title> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="description" content="I made a presentation at Khan Academy on a few good things to know about Python&apos;s import system. Here&apos;s a writeup of that presentation."> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!--inject:head:css--> <style>#post-title,h2{font-weight:400}#comments,#draft-bar,#end-bits,#top-header{text-align:center}.c,.c1,.cm,.cs,.ge{font-style:italic}#draft-bar{position:fixed;bottom:0;left:0;right:0;background-color:#EEA;padding:1em}#post-body{margin:0 auto;line-height:1.5;max-width:50em}#post-body img,#top-header,table.footnote:first-of-type{margin-top:2em}#top-header{margin-bottom:4em}#post-title{font-size:2em;line-height:1.5;letter-spacing:.08em;margin-bottom:.4em}h2{letter-spacing:.07em}#post-body img{max-width:100%;margin-bottom:2em}table.footnote{font-size:.8em}pre,tt{font-family:'Courier New',Courier,'Lucida Sans Typewriter','Lucida Typewriter',monospace}pre{padding-left:1em}.red-bold{color:red;font-weight:700}#end-bits{margin:3em 0 1em;font-size:1.25em}#end-bits a{white-space:nowrap}#comments{color:#AAA}body{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;background-color:#FEFEFE;color:#161616;padding-bottom:5em;margin:0;font-size:16px}.bounded{padding:0 2em}@media (min-width:1500px){body{font-size:19px}}@media (max-width:1000px){body{font-size:15px}}@media (max-width:300px){body{font-size:11px}}b,strong{font-weight:600}a{text-decoration:none;color:#778A2D}a:hover{text-decoration:underline}#content .pure-form fieldset,#content .pure-form legend{border-bottom:none}a.pure-button-primary,button.pure-button-primary{background-color:#5CADB5;font-weight:600}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}.faded{opacity:.7}.align-center{display:block;margin:0 auto}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style> <!--endinject--> </head> <body id="post-page"> <header id="top-header"> <h1 id="post-title"> <a href="/">John CS</a>: The Python Import System </h1> <div id="post-metadata" class="faded"> Posted March 31, 2014 </div> </header> <div id="post-body"> <div class="document"> <p>I made a presentation at Khan Academy on a few good things to know about Python&apos;s import system. Here&apos;s a writeup of that presentation (this is written mostly as a reference, sorry for the dryness).</p> <p>The slides are available <a class="reference external" href="https://docs.google.com/presentation/d/18JO4L9HRY9UJypAW49vj4QnCgl_MoseKxPpE9PKlrg4/edit?usp=sharing">here</a>.</p> <div class="section" id="vocab-review-package-vs-module"> <h2>Vocab Review: Package vs Module</h2> <p>A Python module is a single file that you can import, a Python package is a collection of modules and packages (<a class="reference external" href="http://stackoverflow.com/a/7948504">SO answer</a>).</p> <p>For example, if we made a file named <tt class="docutils literal">foo.py</tt> and then executed <tt class="docutils literal">import foo</tt>, we would be importing a module.</p> <p>Now if we were to make a directory named <tt class="docutils literal">bar/</tt> and place two files, one named <tt class="docutils literal">__init__.py</tt> and the other named <tt class="docutils literal">foo.py</tt>, in that directory, we could then execute <tt class="docutils literal">import bar.foo</tt> and we would be importing the module <tt class="docutils literal">foo</tt> from the <tt class="docutils literal">bar</tt> package. The <tt class="docutils literal">__init__.py</tt> is important here only because it tells Python that <tt class="docutils literal">bar</tt> is a package and not just some random directory.</p> </div> <div class="section" id="note-packages-can-be-zip-archives"> <h2>Note: Packages can be Zip Archives</h2> <p>Instead of containing a package within a directory, you can also store them in zip archives thanks to the <a class="reference external" href="https://docs.python.org/2/library/zipimport.html">zipimport</a> standard libary shipped with Python since version 2.3. This is very common if you install packages as <a class="reference external" href="http://stackoverflow.com/a/2051195">eggs</a>, which are actually just fancy zip archives.</p> </div> <div class="section" id="sys-path"> <h2><tt class="docutils literal">sys.path</tt></h2> <p><tt class="docutils literal">sys.path</tt> is a list of locations Python will look for packages in when you use <tt class="docutils literal">import</tt> or <tt class="docutils literal">from</tt>. The list will be scanned front-to-back, and the first module it finds with the name you&apos;re looking for will be used (which can be problematic sometimes).</p> <p>When you modify the <tt class="docutils literal">PYTHONPATH</tt> environmental variable, you&apos;re indirectly adding to <tt class="docutils literal">sys.path</tt> (it&apos;s hard for you to know ahead of time where in the list your paths will be placed though).</p> </div> <div class="section" id="the-site-packages-directory"> <h2>The site-packages Directory</h2> <p>The <tt class="docutils literal"><span class="pre">site-packages/</span></tt> directory is where your third-party Python packages and modules are likely to live. <tt class="docutils literal">pip</tt> and <tt class="docutils literal">easy_install</tt> installs things into this directory, and <tt class="docutils literal">virtualenv</tt> creates a new <tt class="docutils literal"><span class="pre">site-packages</span></tt> directory as one of its primary methods of seperating the packages in the virtual environment from the packages on the rest of your system.</p> <p>The location of this directory varies from system to system (and of course is changed when you&apos;re in a virtual environment), but it&apos;s nearly always called <tt class="docutils literal"><span class="pre">site-packages/</span></tt> so whenever I&apos;m helping someone with import-related problems I usually just do a find on this name to get my bearings. I might also use the <tt class="docutils literal">__file__</tt> attribute (<a class="reference external" href="http://stackoverflow.com/a/9271479">info on this attribute</a>) of an imported module to find it as well.</p> <p>The <a class="reference external" href="https://docs.python.org/2/library/site.html">site</a> standard module takes care of adding your <tt class="docutils literal"><span class="pre">site-packages</span></tt> directory to your path. The module also descends into it and handles any <tt class="docutils literal">.pth</tt> files within.</p> </div> <div class="section" id="pth-files"> <h2><tt class="docutils literal">.pth</tt> files</h2> <p>These files are read by the <tt class="docutils literal">site</tt> module and the paths contained within are added to <tt class="docutils literal">sys.path</tt>. If you visit your own <tt class="docutils literal"><span class="pre">site-packages</span></tt> directory on your installation you&apos;re sure to see many of these such files.</p> <p><tt class="docutils literal">.pth</tt> files are very handy, and you should definitely consider using them instead of modifying your <tt class="docutils literal">PYTHONPATH</tt> if you&apos;d like the change to be permanent.</p> <p>You can also add arbitrary Python into these files by prefixing an <tt class="docutils literal">import</tt> statement to the line. This feature doesn&apos;t seem to be documented but is leveraged by a few libraries such as <tt class="docutils literal"><span class="pre">easy-install</span></tt>.</p> </div> <div class="section" id="extending-the-import-system"> <h2>Extending the Import System</h2> <p>If your needs are complex, you might want to take advantage of the hooks added by <a class="reference external" href="http://legacy.python.org/dev/peps/pep-0302/">PEP 302</a> to extend the import system. You can also extend or reimplement the <tt class="docutils literal">site</tt> module yourself (I did this while creating <a class="reference external" href="https://github.com/brownhead/superzippy">Super Zippy</a>). Finally, you can do super crazy things like overriding <tt class="docutils literal">__import__</tt>. If you want to do it you can probably get Python to let you do it.</p> </div> </div> </div> <div id="end-bits"> <a href="/">see all posts</a> - <a href="/rss.xml">subscribe with RSS</a> </div> <div id="comments"> (comments are temporarily unavailable) </div> <script>!function(e,n,a,t,c,o,s){e.GoogleAnalyticsObject=c,e[c]=e[c]||function(){(e[c].q=e[c].q||[]).push(arguments)},e[c].l=1*new Date,o=n.createElement(a),s=n.getElementsByTagName(a)[0],o.async=1,o.src=t,s.parentNode.insertBefore(o,s)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-51104787-1","johncs.com"),ga("send","pageview");</script> </body> </html> 