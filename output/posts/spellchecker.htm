<!DOCTYPE html> <html> <head> <title>John CS - Typos in search queries</title> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="description" content="While I was interning at Khan Academy I got to tackle an interesting problem: providing good search results for mispelled queries."> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!--inject:head:css--> <style>#post-title,h2{font-weight:400}#comments,#draft-bar,#end-bits,#top-header{text-align:center}.c,.c1,.cm,.cs,.ge{font-style:italic}#draft-bar{position:fixed;bottom:0;left:0;right:0;background-color:#EEA;padding:1em}#post-body{margin:0 auto;line-height:1.5;max-width:50em}#post-body img,#top-header,table.footnote:first-of-type{margin-top:2em}#top-header{margin-bottom:4em}#post-title{font-size:2em;line-height:1.5;letter-spacing:.08em;margin-bottom:.4em}h2{letter-spacing:.07em}#post-body img{max-width:100%;margin-bottom:2em}table.footnote{font-size:.8em}pre,tt{font-family:'Courier New',Courier,'Lucida Sans Typewriter','Lucida Typewriter',monospace}pre{padding-left:1em}.red-bold{color:red;font-weight:700}#end-bits{margin:3em 0 1em;font-size:1.25em}#end-bits a{white-space:nowrap}#comments{color:#AAA}body{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;background-color:#FEFEFE;color:#161616;padding-bottom:5em;margin:0;font-size:16px}.bounded{padding:0 2em}@media (min-width:1500px){body{font-size:19px}}@media (max-width:1000px){body{font-size:15px}}@media (max-width:300px){body{font-size:11px}}b,strong{font-weight:600}a{text-decoration:none;color:#778A2D}a:hover{text-decoration:underline}#content .pure-form fieldset,#content .pure-form legend{border-bottom:none}a.pure-button-primary,button.pure-button-primary{background-color:#5CADB5;font-weight:600}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}.faded{opacity:.7}.align-center{display:block;margin:0 auto}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style> <!--endinject--> </head> <body id="post-page"> <header id="top-header"> <h1 id="post-title"> <a href="/">John CS</a>: Typos in search queries </h1> <div id="post-metadata" class="faded"> Posted April 11, 2015 </div> </header> <div id="post-body"> <div class="document"> <p>One year ago, searching for <em>polinomials</em> on <a class="reference external" href="https://www.khanacademy.org/search">Khan Academy&apos;s search page</a> would give you no results. If you typed the same thing into Google you&apos;d be efficiently and politely corrected.</p> <img alt="Google&apos;s &quot;Showing results for...&quot; feature." class="align-center" src="/images/showing_results_for.png" style="width: 75%;"> <p>I didn&apos;t have any illusions of making a solution as good as Google&apos;s, but I figured I could improve things for a significant number of users anyways <a class="footnote-reference" href="#reach-research" id="id1">[1]</a>.</p> <p>The first thing I did was see if there was some library or tool that we could use to do some simple spellchecking. Khan Academy runs on Google App Engine&apos;s Python platform, so I needed a pure-Python library (<a class="reference external" href="https://cloud.google.com/appengine/docs/python/#Python_Pure_Python">installing CPython extensions is not allowed</a>).</p> <p><a class="reference external" href="https://pypi.python.org/pypi/Whoosh/">Whoosh</a> was a good candidate, but it wasn&apos;t as memory efficient as I wanted <a class="footnote-reference" href="#whoosh-memory" id="id2">[2]</a>. Integrating Whoosh with Google App Engine also looked error-prone. After looking around some more and not finding anything super useable, I decided to try something crazy.</p> <p>I decided to build my own pure-Python spell checker.</p> <img alt="Wait, what?" class="align-center" src="/images/wat.png"> <p>I was expecting my mentor and others to balk at the idea (<a class="reference external" href="https://www.khanacademy.org/careers/interns">I was an intern during this time</a>). But all I received were encouraging nods, so off I went.</p> <p>To get things up and going quickly, I chose to follow a simple brute force algorithm like the one Peter Norvig describes in <a class="reference external" href="http://norvig.com/spell-correct.html">his awesome blog post</a>. Soon I had something running that worked well and was super fast. There was a problem though.</p> <p>Storing our English words in a Python <tt class="docutils literal">dict</tt> consumed about 18 MB of space <a class="footnote-reference" href="#benchmarking" id="id3">[3]</a>. Since my hope was that this code could run on all our frontend instances and work for all languages <a class="footnote-reference" href="#premature" id="id4">[4]</a>, our infrastructure team and I weren&apos;t super excited by this.</p> <img alt="Oh hell no." class="align-center" src="/images/oh-hell-no.gif"> <p>To reduce memory I first tried using <a class="reference external" href="https://docs.python.org/2/library/array.html">Python&apos;s array module</a> to build my own immutable hash table. This did indeed bring our memory usage down but made spellchecking take several seconds per query.</p> <p>I found that the loss of speed came from doing way more things in Python code instead of CPython&apos;s super-fast <tt class="docutils literal">dict</tt> implementation. This ruled out improving the performance through clever data structures. So I had to give up on my plans for an awesome <a class="reference external" href="http://stevehanov.ca/blog/index.php?id=120">succinct trie</a> implementation and instead go hunting through the standard library to find the best native solution available.</p> <p>Thus I arrived at the binary search implementation in the <a class="reference external" href="https://docs.python.org/2/library/bisect.html">bisect module</a> of Python&apos;s standard library.</p> <p>The idea is simple. Store a hash of each word in a sorted array and then do binary search on that array. The hashes are small and can be tightly packed in less than 2 MB. Binary search is fast and allows the spell checking algorithm to service any query.</p> <p>Best of all, it works.</p> <img alt="Screenshot of the spell checker working on Khan Academy" class="align-center" src="/images/khan-academy-correction.png" style="width: 75%;"> <table class="docutils footnote" frame="void" id="reach-research" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>I found that the 28% of the least frequent 16,000 queries and 18% of the most frequent 16,000 queries had typos within edit distance 2 of a known common word. I defined &quot;common word&quot; by creating a single dictionary from some freely licensed english dictionaries and all of Khan Academy&apos;s content. This was part of my preliminary research and was done to check that a autocorrecter was a useful feature.</td></tr> </tbody> </table> <table class="docutils footnote" frame="void" id="whoosh-memory" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>I came to this conclusion by auditing the code, which is (of course) not nearly as accurate as actually running benchmarks. If you&apos;re familiar with Whoosh and think I came to the wrong conclusion, please let me know.</td></tr> </tbody> </table> <table class="docutils footnote" frame="void" id="benchmarking" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td>Once I got something working at all, I invested time into making a script that would give me metrics on our speed, memory usage, and accuracy. <a class="reference external" href="https://github.com/pympler/pympler">Pympler</a> was used to get the size of the dictionary implementations as well as the max memory usage when running the algorithm.</td></tr> </tbody> </table> <table class="docutils footnote" frame="void" id="premature" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label"><a class="fn-backref" href="#id4">[4]</a></td><td>18 MB is a lot of space for our frontend instances, but we could&apos;ve spared it. I never ended up adding support for other languages, so I think it would have been reasonable to just ship with the native <tt class="docutils literal">dict</tt>. The time to optimize should have been when I was adding support for other languages.</td></tr> </tbody> </table> </div> </div> <div id="end-bits"> <a href="/">see all posts</a> - <a href="/rss.xml">subscribe with RSS</a> </div> <div id="comments"> (comments are temporarily unavailable) </div> <script>!function(e,n,a,t,c,o,s){e.GoogleAnalyticsObject=c,e[c]=e[c]||function(){(e[c].q=e[c].q||[]).push(arguments)},e[c].l=1*new Date,o=n.createElement(a),s=n.getElementsByTagName(a)[0],o.async=1,o.src=t,s.parentNode.insertBefore(o,s)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-51104787-1","johncs.com"),ga("send","pageview");</script> </body> </html> 