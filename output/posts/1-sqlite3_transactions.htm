<!DOCTYPE html> <html> <head> <title>John CS - Transactions with Python&apos;s sqlite3 Package</title> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="description" content="Python&apos;s sqlite3 package tries to take care of the tricky business of properly executing BEGIN and COMMIT statements. The rules of when and how this automatic transactioning is done has confounded a number of developers, many of whom have jumped ship and chosen to use the aspw package or similar. Well I&apos;ve plumbed the depths of the CPython implementation and I&apos;m happy to present the rules to you in a single, tidy blog post."> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!--inject:head:css--> <style>#post-title,h2{font-weight:400}#comments,#draft-bar,#end-bits,#top-header{text-align:center}.c,.c1,.cm,.cs,.ge{font-style:italic}#draft-bar{position:fixed;bottom:0;left:0;right:0;background-color:#EEA;padding:1em}#post-body{margin:0 auto;line-height:1.5;max-width:50em}#post-body img,#top-header,table.footnote:first-of-type{margin-top:2em}#top-header{margin-bottom:4em}#post-title{font-size:2em;line-height:1.5;letter-spacing:.08em;margin-bottom:.4em}h2{letter-spacing:.07em}#post-body img{max-width:100%;margin-bottom:2em}table.footnote{font-size:.8em}pre,tt{font-family:'Courier New',Courier,'Lucida Sans Typewriter','Lucida Typewriter',monospace}pre{padding-left:1em}.red-bold{color:red;font-weight:700}#end-bits{margin:3em 0 1em;font-size:1.25em}#end-bits a{white-space:nowrap}#comments{color:#AAA}body{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;background-color:#FEFEFE;color:#161616;padding-bottom:5em;margin:0;font-size:16px}.bounded{padding:0 2em}@media (min-width:1500px){body{font-size:19px}}@media (max-width:1000px){body{font-size:15px}}@media (max-width:300px){body{font-size:11px}}b,strong{font-weight:600}a{text-decoration:none;color:#778A2D}a:hover{text-decoration:underline}#content .pure-form fieldset,#content .pure-form legend{border-bottom:none}a.pure-button-primary,button.pure-button-primary{background-color:#5CADB5;font-weight:600}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}.faded{opacity:.7}.align-center{display:block;margin:0 auto}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style> <!--endinject--> </head> <body id="post-page"> <header id="top-header"> <h1 id="post-title"> <a href="/">John CS</a>: Transactions with Python&apos;s sqlite3 Package </h1> <div id="post-metadata" class="faded"> Posted March 5, 2014 </div> </header> <div id="post-body"> <div class="document"> <p>Python&apos;s <tt class="docutils literal">sqlite3</tt> package tries to take care of the tricky business of properly executing <tt class="docutils literal">BEGIN</tt> and <tt class="docutils literal">COMMIT</tt> statements. The rules of when and how this automatic transactioning is done has confounded a number of developers, many of whom have jumped ship and chosen to use the <a class="reference external" href="https://github.com/rogerbinns/apsw">aspw</a> package or similar.</p> <p>For one reason or another I needed to use the standard libary&apos;s package for a project, so I jumped into CPython&apos;s internals to take a look at exactly how it behaves (I was specifically looking at Python 2.7&apos;s most recent code). The results are mostly ordinary with some occasional gotchas.</p> <div class="section" id="rules-for-automatic-transactions"> <h2>Rules for Automatic Transactions</h2> <p>By automatic transactions here I am not referring to SQLite&apos;s built-in behavior of wrapping data-changing operations in transactions. Rather, I am speaking of the Python module&apos;s special behavior where it actually executes <tt class="docutils literal">BEGIN</tt> and <tt class="docutils literal">COMMIT</tt> statements on your behalf.</p> <p>A transaction is automatically started (ie: a <tt class="docutils literal">BEGIN</tt> is executed) when all of the following conditions are met:</p> <ol class="arabic simple"> <li>The <tt class="docutils literal">isolation_level</tt> is not <tt class="docutils literal">None</tt>. <a class="footnote-reference" href="#isolation-level" id="id1">[1]</a></li> <li>The Connection object thinks a transaction has not already been started.</li> <li>An <tt class="docutils literal">UPDATE</tt>, <tt class="docutils literal">DELETE</tt>, <tt class="docutils literal">INSERT</tt>, or <tt class="docutils literal">REPLACE</tt> statement is being executed. <a class="footnote-reference" href="#transactional-statements" id="id2">[2]</a></li> </ol> <p>The <tt class="docutils literal">BEGIN</tt> statement will be concatenated with whatever value is in <tt class="docutils literal">isolation_level</tt>. For example, if <tt class="docutils literal">isolation_level</tt> was equal to <tt class="docutils literal">DEFERRED</tt>, the statement executed when the above conditions are met is <tt class="docutils literal">BEGIN DEFERRED</tt>.</p> <p>A transaction is automatically ended (ie: a <tt class="docutils literal">COMMIT</tt> is executed) when all of the following conditions are met:</p> <ol class="arabic simple"> <li>The <tt class="docutils literal">isolation_level</tt> is not <tt class="docutils literal">None</tt>. <a class="footnote-reference" href="#isolation-level" id="id3">[1]</a></li> <li>The Connection object thinks a transaction has already been started.</li> <li>Any statement that is not an <tt class="docutils literal">UPDATE</tt>, <tt class="docutils literal">DELETE</tt>, <tt class="docutils literal">INSERT</tt>, <tt class="docutils literal">REPLACE</tt>, or <tt class="docutils literal">SELECT</tt> is being executed. <a class="footnote-reference" href="#transactional-statements" id="id4">[2]</a></li> </ol> <p>The <a class="reference external" href="http://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.commit">sqlite3.Connection.commit()</a> function will also send a <tt class="docutils literal">COMMIT</tt> statement as long as the Connection object thinks a transaction has already been started.</p> </div> <div class="section" id="how-the-connection-object-detects-transactions"> <h2>How the Connection Object Detects Transactions</h2> <p>When the module checks to see if a transaction is in progress, it inspects the Connection&apos;s <tt class="docutils literal">inTransaction</tt> data member (which is not available from Python). This is fine and well if you&apos;re only using automatic transactions, but the module can get confused if you ever execute a <tt class="docutils literal">BEGIN</tt> statement yourself: If the version of SQLite CPython was linked with is older than 3.2.2, <a class="footnote-reference" href="#transaction-check" id="id5">[3]</a> and you&apos;ve started a transaction manually by executing a <tt class="docutils literal">BEGIN</tt> statement yourself, the <tt class="docutils literal">inTransaction</tt> data member may have an incorrect value.</p> <p>As a rule of thumb, I would advise never executing a <tt class="docutils literal">BEGIN</tt> statement manually unless you never use the <tt class="docutils literal">sqlite3.Connection.commit()</tt> function and you&apos;ve set the <tt class="docutils literal">isolation_level</tt> to <tt class="docutils literal">None</tt>.</p> <table class="docutils footnote" frame="void" id="isolation-level" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label">[1]</td><td><em>(<a class="fn-backref" href="#id1">1</a>, <a class="fn-backref" href="#id3">2</a>)</em> The <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/connection.c#l1129">pysqlite_connection_set_isolation_level()</a> function will set the connection object&apos;s <tt class="docutils literal">begin_statement</tt> member to NULL if the <tt class="docutils literal">isolation_level</tt> is set to <tt class="docutils literal">None</tt>. Inside of the <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> function <tt class="docutils literal">begin_statement</tt> is then checked and a transaction will not be started or ended unless it is non-null.</td></tr> </tbody> </table> <table class="docutils footnote" frame="void" id="transactional-statements" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label">[2]</td><td><em>(<a class="fn-backref" href="#id2">1</a>, <a class="fn-backref" href="#id4">2</a>)</em> The <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> function is responsible for executing all of the statements that are given to the module and it only starts a transaction (by calling <tt class="docutils literal">_pysqlite_connection_begin()</tt>) if the statement is one of the types mentioned.</td></tr> </tbody> </table> <table class="docutils footnote" frame="void" id="transaction-check" rules="none"> <colgroup><col class="label"><col></colgroup> <tbody valign="top"> <tr><td class="label"><a class="fn-backref" href="#id5">[3]</a></td><td>In <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> there is a <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l752">preprocessor conditional</a> that conditionally enables the check, and as far as I could tell there is no explicit check to see if the user ever sends a <tt class="docutils literal">BEGIN</tt> themselves.</td></tr> </tbody> </table> </div> </div> </div> <div id="end-bits"> <a href="/">see all posts</a> - <a href="/rss.xml">subscribe with RSS</a> </div> <div id="comments"> (comments are temporarily unavailable) </div> <script>!function(e,n,a,t,c,o,s){e.GoogleAnalyticsObject=c,e[c]=e[c]||function(){(e[c].q=e[c].q||[]).push(arguments)},e[c].l=1*new Date,o=n.createElement(a),s=n.getElementsByTagName(a)[0],o.async=1,o.src=t,s.parentNode.insertBefore(o,s)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-51104787-1","johncs.com"),ga("send","pageview");</script> </body> </html> 