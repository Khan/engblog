<!DOCTYPE html> <html> <head> <title>The User Write Lock: an Alternative to Transactions for Google App Engine | Khan Academy Engineering</title> <link rel="icon" href="/images/favicon.ico"> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta name="description" content="We're the engineers behind Khan Academy. We're building a free, world-class education for anyone, anywhere.">  <style>#left-bar .logo,body{font-family:Lato,'Helvetica Neue',Arial,sans-serif;src:url(https://fonts.googleapis.com/css?family=Lato)}#left-bar,#left-bar .logo a{color:#FFF}#left-bar .bio a,#left-bar .logo a{text-decoration:none}#left-bar .logo,#left-bar .subscription-info{text-align:left}.caption,caption,figcaption{font-style:italic}body,html{height:100%;margin:0}body{background-color:#F7F8FA;font-size:14px;width:920px}@media (min-width:920px){body{font-size:16px}}@media (max-width:920px){body{width:100%}body.mobile-menu-visible{background-color:#0A2A66}}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.inline-author-photo{height:1.6em;width:1.6em;border-radius:.8em;vertical-align:middle;margin-right:4px}.font-awesome-svg{width:1em;height:1em;display:inline-block}#left-bar{box-sizing:border-box;display:table-cell;background-color:#0A2A66;min-width:325px;padding:10px 35px 35px}@media (max-width:920px){#left-bar{display:block;width:100%;padding:0 20px}#left-bar.mobile-visible{padding-bottom:60px}#left-bar:not(.mobile-visible) section{display:none}}#left-bar .logo{font-size:28px;letter-spacing:1px;line-height:1em;margin-bottom:6px;margin-left:-2px;margin-top:0;text-transform:uppercase}#left-bar .logo.mobile{font-size:24px;display:none}@media (max-width:920px){#left-bar .logo.mobile{display:block}#left-bar .logo.mobile a{padding:11px 20px 15px;margin:0 -20px -15px;display:block;text-decoration:none;color:#FFF}#left-bar .logo.mobile svg{opacity:.8;margin-right:-2px;margin-top:1px;height:25px}#left-bar .logo.mobile .text,#left-bar .logo.mobile svg{vertical-align:middle}#left-bar .logo{display:none}}#left-bar .logo .engineering{color:#00E5AE}#left-bar .bio{font-size:12px;line-height:1.4;margin-top:10px}#left-bar .bio,#left-bar .bio *{color:#FFF}#left-bar .bio a:hover{text-decoration:underline}#left-bar .subscription-info .links{font-size:24px}#left-bar .subscription-info .links a{margin-right:7px;text-decoration:none;color:#FFF}#left-bar .subscription-info .links a:hover{border-bottom:1px solid #FFF}#left-bar .subscription-info .links .email{margin-top:-1px}#left-bar .section-heading{color:#F7F8FA;font-size:12px;font-weight:300;letter-spacing:.5px;margin-top:40px;text-transform:lowercase}#left-bar .post-blurb{margin-top:30px;padding-bottom:4px;border-left:1px solid transparent;padding-left:10px;margin-left:-10px;font-size:14px}@media (max-width:920px){#left-bar .post-blurb{border-left:10px solid transparent;padding-left:17px;margin-left:-26px}}#left-bar .post-blurb:first-of-type{margin-top:20px}#left-bar .post-blurb.team-infrastructure{border-color:#E57281}#left-bar .post-blurb.team-web-frontend{border-color:#63BBD9}#left-bar .post-blurb.team-mobile{border-color:#63BB81}#left-bar .post-blurb.team-eng-leads{border-color:#ccc}#left-bar .post-blurb.team-design{border-color:#ab59c6}#left-bar .post-blurb.team-wtf{border-color:#ff00af}#left-bar .post-blurb.team-content-platform{border-color:#ffbf00}#left-bar .post-blurb .title{font-weight:400;margin:0 0 9px}#left-bar .post-blurb .title a{color:#FFF;text-decoration:none}#left-bar .post-blurb .title a:hover{text-decoration:underline}#left-bar .post-blurb .info{font-size:12px}#left-bar .post-blurb .info .author-link{color:#FFF;text-decoration:none;font-weight:700;font-size:11px}#left-bar .post-blurb .info .author-link:hover{text-decoration:underline}#left-bar .meta-section .link-list{margin:0 0 0 4px;padding:0;list-style-type:square}#left-bar .meta-section .link-list li{margin-bottom:10px}#left-bar .meta-section .link-list li a{margin-left:-4px}#left-bar .meta-section .link-list a{color:#FFF;text-decoration:none}#left-bar .meta-section .link-list a:hover{text-decoration:underline}#content{display:table-cell;padding:10px 35px 35px 50px;color:#21242C}@media (max-width:920px){#left-bar .meta-section .link-list{list-style-type:none}#content{padding:10px 20px 50px;display:block}#content.mobile-hidden{display:none}}#content .title a{letter-spacing:1px;margin-bottom:8px;font-size:1.265625em;line-height:1;color:#21242C;text-decoration:none}@media (min-width:920px){#content .title a{font-size:1.5625em}}#content .title a:focus,#content .title a:hover{text-decoration:underline}#content .info .author-link{color:#21242C;font-weight:700;text-decoration:none}#content .info .author-link:hover{text-decoration:underline}#content .info .team-tag{border-radius:.3em;padding:.3em .8em;font-size:.7em;font-weight:500;display:inline-block;color:#fff;margin-left:4px;margin-right:4px}#content .info .team-tag.web-frontend{background-color:#63BBD9}#content .body{margin-top:30px;line-height:1.5;width:580px}@media (max-width:920px){#content .body{width:100%}}#content .body a{color:#1865f2;text-decoration:none}#content .body a:hover{text-decoration:underline}#content .body img{max-width:100%}#content .keep-reading-buttons{display:table;margin-top:30px;width:100%}#content .keep-reading-buttons .keep-reading-cell{display:table-cell;margin:0;padding:0;vertical-align:top;width:50%}progress,sub,sup{vertical-align:baseline}#content .keep-reading-buttons .keep-reading-right{text-align:right}#content .keep-reading-buttons .button{padding:3px 0;display:inline-block;max-width:90%;color:#21242C}.align-center,details{display:block}#content .keep-reading-buttons .button .header{font-size:12px;color:rgba(33,36,44,.64)}#content .keep-reading-buttons .button .post-title{margin-top:8px;color:#1865f2;text-decoration:none;display:block}#content .keep-reading-buttons .button .post-title:hover,abbr[title]{text-decoration:underline}#content .keep-reading-buttons .button.next-post-button{border-right:2px solid;padding-right:10px;margin-right:-10px}#content .keep-reading-buttons .button.prev-post-button{border-left:2px solid;padding-left:10px;margin-left:-10px}#content .keep-reading-buttons .button.team-infrastructure{border-color:#E57281}#content .keep-reading-buttons .button.team-web-frontend{border-color:#63BBD9}#content .keep-reading-buttons .button.team-mobile{border-color:#63BB81}#content .keep-reading-buttons .button.team-eng-leads{border-color:#ccc}#content .keep-reading-buttons .button.team-design{border-color:#ab59c6}#content .keep-reading-buttons .button.team-wtf{border-color:#ff00af}#content .keep-reading-buttons .button.team-content-platform{border-color:#ffbf00}#content .footnote-text{font-size:12px;line-height:normal}.code,.codehilite{background-color:#EEE;border-radius:6px;border:1px solid #CCC;overflow-x:auto;padding:6px;margin:14px 0}.code .ln,.codehilite .ln{color:#AAA}.label{margin-top:1.5em}.caption{text-align:center}caption,table.data-table th{text-align:left}.align-center{margin-left:auto;margin-right:auto}.literal,code{word-wrap:break-word}caption{caption-side:bottom}table.data-table{margin:0 auto}table.data-table td{text-align:right}table.data-table td,table.data-table th{padding:0 5px;white-space:nowrap}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}.x-scrollable{overflow-x:auto}button,hr,input{overflow:visible}/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}textarea{overflow:auto}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.c,.c1,.cm,.cs,.ge{font-style:italic}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}summary{display:list-item}[hidden],template{display:none}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style>  </head> <body> <div id="left-bar"> <h1 class="logo"> <a href="/"><span aria-label="Khan Academy">Khan</span> <span class="engineering">Engineering</span></a> </h1> <h1 class="logo mobile">  <a id="mobile-menu-button" href="javascript: void 0"> <svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1664 1344v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45z" fill="#fff"/></svg> <span class="text"><span aria-label="Khan Academy">Khan</span> <span class="engineering">Engineering</span></span> </a> </h1> <section class="bio"> We're the engineers behind <a href="https://www.khanacademy.org">Khan Academy</a>. We're building a free, world-class education for anyone, anywhere. </section> <section class="subscription-info"> <h2 class="section-heading">Subscribe</h2> <div class="links"> <a href="https://twitter.com/KAEngineering"><span class="sr-only">Subscribe with Twitter</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z" fill="#fff"/></svg></a> <a href="/rss.xml"><span class="sr-only">Subscribe with RSS</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M576 1344q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm512 123q2 28-17 48-18 21-47 21h-135q-25 0-43-16.5t-20-41.5q-22-229-184.5-391.5t-391.5-184.5q-25-2-41.5-20t-16.5-43v-135q0-29 21-47 17-17 43-17h5q160 13 306 80.5t259 181.5q114 113 181.5 259t80.5 306zm512 2q2 27-18 47-18 20-46 20h-143q-26 0-44.5-17.5t-19.5-42.5q-12-215-101-408.5t-231.5-336-336-231.5-408.5-102q-25-1-42.5-19.5t-17.5-43.5v-143q0-28 20-46 18-18 44-18h3q262 13 501.5 120t425.5 294q187 186 294 425.5t120 501.5z" fill="#fff"/></svg></a> </div> </section> <section> <h2 class="section-heading">Latest posts</h2> <div class="post-blurb team-content-platform"> <h3 class="title"> <a href="/posts/kotlin-for-python-developers.htm">Kotlin for Python developers</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/aasmundeldhuset.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://eldhuset.net/">Aasmund Eldhuset</a> on November 29<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/using-static-analysis-in-Python-and-JavaScript-to-make-your-system-safer.htm">Using static analysis in Python, JavaScript and more to make your system safer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on July 26<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/kotlin-adoption.htm">Kotlin on the server at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/colin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/cjfuller">Colin Fuller</a> on June 28<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/original-serverless.htm">The Original Serverless Architecture is Still Here</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on May 31<sup aria-hidden="true">st</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/architects-at-khan.htm">What do software architects at Khan Academy do?</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on May 14<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/khanalytics.htm">New data pipeline management platform at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ragini.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/guptaragini">Ragini Gupta</a> on April 30<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-3.htm">Untangling our Python Code</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/carter.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://carterjbastian.com/">Carter J. Bastian</a> on April 16<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/slicker.htm">Slicker: A Tool for Moving Things in Python</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on April 2<sup aria-hidden="true">nd</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-1.htm">The Great Python Refactor of 2017 And Also 2018</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on March 19<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/working-remotely.htm">Working Remotely</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/scottgrant.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/scotchfield">Scott Grant</a> on Oct 2, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/tips-for-code-reviews.htm">Tips for giving your first code reviews</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/hannah.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://hannahblumberg.com/">Hannah Blumberg</a> on Sep 18, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/lets-reduce.htm">Let's Reduce! A Gentle Introduction to Javascript's Reduce Method</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/joshcomeau.jpeg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/joshwcomeau">Josh Comeau</a> on Jul 10, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/creating-query-components-with-apollo.htm">Creating Query Components with Apollo</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Jun 12, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/react-native-monorepo.htm">Migrating to a Mobile Monorepo for React Native</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jared.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jaredforsyth.com/">Jared Forsyth</a> on May 29, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-fms.htm">Memcached-Backed Content Infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 15, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-profiling.htm">Profiling App Engine Memcached</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 1, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/flex-language-shootout.htm">App Engine Flex Language Shootout</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/amos-latteier.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/latteier">Amos Latteier</a> on Apr 17, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-oss-activity.htm">What's New in OSS at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Apr 3, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/automating-app-store-screenshots.htm">Automating App Store Screenshots</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on Mar 27, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/its-okay-to-break-things.htm">It's Okay to Break Things: Reflections on Khan Academy's Healthy Hackathon</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kimeriegreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/Kimerie">Kimerie Green</a> on Mar 6, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/interning-at-khan-academy.htm">Interning at Khan Academy: from student to intern</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/shadajladdad.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://shadaj.me">Shadaj Laddad</a> on Dec 12, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/prototyping-with-framer.htm">Prototyping with Framer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/nickbreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/MrNickBreen">Nick Breen</a> on Oct 3, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/evolving-our-content-infrastructure.htm">Evolving our content infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 19, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/a-really-small-app.htm">Building a Really, Really Small Android App</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/charliemarsh.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.crmarsh.com">Charlie Marsh</a> on Aug 22, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/a-case-for-time-tracking.htm">A Case for Time Tracking: Data Driven Time-Management</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/olivernorthwood.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/allofthenorthwood">Oliver Northwood</a> on Aug 8, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/time-management-multiple-authors.htm">Time Management at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers">Several Authors</a> on Jul 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/healthy-hackathons.htm">Hackathons Can Be Healthy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/tomyedwab.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.arguingwithalgorithms.com">Tom Yedwab</a> on Jul 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/transaction-safety.htm">Ensuring transaction-safety in Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 27, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/user-write-lock.htm">The User Write Lock: an Alternative to Transactions for Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 20, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/engineering-principles.htm">Khan Academy's Engineering Principles</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkamens.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bjk5.com">Ben Kamens</a> on Jun 6, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/shortest-regex.htm">Minimizing the length of regular expressions, in practice</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on May 23, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/introducing-swifttweaks.htm">Introducing SwiftTweaks</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on May 9, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/autonomous-dumbledore.htm">The Autonomous Dumbledore</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/evykassirer.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.evykassirer.com/">Evy Kassirer</a> on Apr 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/career-development.htm">Engineering career development at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/beneater.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/beneater">Ben Eater</a> on Apr 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/aphrodite-inline-css.htm">Inline CSS at Khan Academy: Aphrodite</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jamiewong.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jamie-wong.com">Jamie Wong</a> on Mar 29, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/starting-android.htm">Starting Android at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkomalo.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/benkomalo">Ben Komalo</a> on Feb 29, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/translation_assistant.htm">Automating Highly Similar Translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Feb 15, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/snippet-server.htm">The weekly snippet-server: open-sourced</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Feb 1, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/stories-from-interns.htm">Stories from our latest intern class</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers/interns">2015 Interns</a> on Dec 21, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/kanbanning-learnstorm-dev-process.htm">Kanbanning the LearnStorm Dev Process</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on Dec 7, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/js-packaging-http2.htm">Forgo JS packaging? Not so fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Nov 23, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/switching-to-slack.htm">Switching to Slack</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benjaminpollack.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bitquabit.com/">Benjamin Pollack</a> on Nov 9, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/receiving-feedback.htm">Receiving feedback as an intern at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/davidwang.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://ourracingthoughts.com/author/d15w/">David Wang</a> on Oct 26, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/translation-server.htm">Schrödinger's deploys no more: how we update translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/chelseavoss.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://csvoss.github.io/">Chelsea Voss</a> on Oct 12, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/i18nize-templates.htm">i18nize-templates: Internationalization After the Fact</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Sep 28, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/making-thumbnails-fast.htm">Making thumbnails fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 14, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/copy-pasting-more-than-just-text.htm">Copy-pasting more than just text</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/samlau.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/SamLau95">Sam Lau</a> on Aug 31, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/no-cheating-allowed.htm">No cheating allowed!!</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/philliplemons.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://philliplemons.com/">Phillip Lemons</a> on Aug 17, 2015 </div> </div> <div class="post-blurb team-design"> <h3 class="title"> <a href="/posts/fun-with-slopfields.htm">Fun with slope fields, css and react</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/marcosojeda.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://generic.cx/">Marcos Ojeda</a> on Aug 5, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-employees-primer.htm">Khan Academy: a new employee's primer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/rileyshaw.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://rileyjshaw.com">Riley Shaw</a> on Jul 20, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/evil-puzzle.htm">How wooden puzzles can destroy dev teams</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/johnsullivan.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/brownhead">John Sullivan</a> on Jul 6, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/i18n-babel-plugin.htm">Babel in Khan Academy's i18n Toolchain</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Jun 22, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/tota11y.htm">tota11y - an accessibility visualization toolkit</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jordanscales.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/jdan">Jordan Scales</a> on Jun 8, 2015 </div> </div> </section> <section class="meta-section"> <h2 class="section-heading">Meta</h2> <ul class="link-list"> <li><a href="https://github.com/Khan/engblog">About this blog</a></li> <li><a href="https://www.khanacademy.org/about">KA's mission</a></li> <li><a href="https://github.com/khan/engblog/issues">Report a bug</a></li> <li><a id="activate-tota11y" href="javascript: void 0">Activate tota11y</a></li> </ul> </section> </div> <main id="content"> <article class="post"> <h1 class="title"> <a href="/posts/user-write-lock.htm"> The User Write Lock: an Alternative to Transactions for Google App Engine </a> </h1> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <span class="sr-only">by</span> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 20, 2016 </div> <div class="body"> <div class="document"> <p>Transactions are the standard method in Google App Engine's datastore -- as in many databases -- to ensure atomicity. This is true for both atomic writes of multiple entities, and atomic writes of a single entity:</p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">safe_watched_video</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">video</span><span class="p">):</span>
     <span class="n">user</span> <span>=</span> <span class="n">GetUser</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
     <span class="n">user</span><span>.</span><span class="n">num_videos_watched</span> <span>+=</span> <span class="mi">1</span>
     <span class="n">user</span><span>.</span><span class="n">put</span><span class="p">()</span>
     <span class="n">video_log</span> <span>=</span> <span class="n">GetUserVideoLog</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
     <span class="n">video_log</span><span>.</span><span class="n">add_watched_video</span><span class="p">(</span><span class="n">video</span><span class="p">)</span>
     <span class="n">video_log</span><span>.</span><span class="n">put</span><span class="p">()</span>

<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">safe_login_counter</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
     <span class="n">user</span> <span>=</span> <span class="n">GetUser</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
     <span class="n">user</span><span>.</span><span class="n">num_logins</span> <span>+=</span> <span class="mi">1</span>
     <span class="n">user</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> <p>Transactions work by checking all the entities that you plan on <tt class="docutils literal">put()</tt>-ing at both the beginning and end of the function. If someone else had changed an entity in the datastore while the function was running, the transaction rolls back the function and retries.</p> <p>When people think of transactions, they often think of atomically updating multiple entities; a transaction ensures that either both the video-log and the user are updated, or neither is. But the &quot;someone else can modify&quot; problem exists just as much for a single entity, which is why a transaction is needed even for <tt class="docutils literal">safe_login_counter</tt>. Without it, if two processes called <tt class="docutils literal">safe_login_counter()</tt> at the same time with the same user_id, the db operations might end up interleaved in such a way that causes <tt class="docutils literal">num_logins</tt> to end up incremented by 1, not by 2.</p> <div class="section" id="the-trouble-with-transactions"> <h2>The trouble with transactions</h2> <p>While transactions are effective, they can be hard to use, particularly within Google App Engine. One problem is that transactions &quot;freeze&quot; the state of the datastore at the time the transaction starts, yielding surprising results. Suppose you have a function like this:</p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">login_twice</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">login_info</span> <span>=</span> <span class="n">GetLoginInfo</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="n">login_info</span><span>.</span><span class="n">last_login</span> <span>=</span> <span class="n">datetime</span><span>.</span><span class="n">datetime</span><span>.</span><span class="n">now</span><span class="p">()</span>
    <span class="n">login_info</span><span>.</span><span class="n">put</span><span class="p">()</span>
    <span># Don't ask why, but we need to call this twice</span>
    <span class="n">safe_login_counter</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="n">safe_login_counter</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</pre> <p>You might expect this to update num_logins by 2, but in fact it only updates it by 1, because when <tt class="docutils literal">safe_login_counter</tt> calls <tt class="docutils literal">get()</tt>, those call see the &quot;frozen&quot; datastore as it existed at the beginning of <tt class="docutils literal">login_twice</tt>, ignoring the <tt class="docutils literal">put()</tt>'s that we did.</p> <p>While this example is somewhat contrived, such a scenario does come up (typically, as here, with nested transactions), and can be hard to debug. It comes up particularly with the older db interface, since ndb does some caching to try to ameliorate the problem.</p> <p>A second problem is that code inside transactions must be idempotent, since it is can be called more than once if the transaction needs to retry. This is particularly difficult to ensure when using transaction in relatively high-level code, which calls other functions that may not be aware they're being called inside a transaction.</p> <pre class="code python literal-block">
<span class="k">def</span> <span class="nf">update_points_after_watching_video</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">video</span><span class="p">):</span>
     <span># protect against this being called twice.</span>
     <span class="n">key</span> <span>=</span> <span>'points_updated.</span><span class="si">%s</span><span>.</span><span class="si">%s</span><span>'</span> <span>%</span> <span class="p">(</span><span class="n">user</span><span>.</span><span class="n">id</span><span class="p">,</span> <span class="n">video</span><span>.</span><span class="n">id</span><span class="p">)</span>
     <span class="k">if</span> <span class="ow">not</span> <span class="n">memcache</span><span>.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">):</span>
         <span class="bp">self</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="n">video</span><span>.</span><span class="n">points_value</span>
         <span class="n">memcache</span><span>.</span><span class="n">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>   <span># UNSAFE</span>

<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">update_after_watching_video</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">video</span><span class="p">):</span>
    <span class="n">user</span> <span>=</span> <span class="n">GetUser</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="n">user</span><span>.</span><span class="n">update_points_after_watching_video</span><span class="p">(</span><span class="n">video</span><span class="p">)</span>
    <span class="n">video_log</span> <span>=</span> <span class="n">GetUserVideoLog</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">video_log</span><span>.</span><span class="n">add_watched_video</span><span class="p">(</span><span class="n">video</span><span class="p">)</span>
    <span class="n">video_log</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> <p>An equally serious problem is that you cannot do a datastore query inside a transaction:</p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">update_videos_seen</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span>=</span> <span class="n">GetUser</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="n">video_query</span> <span>=</span> <span class="n">UserVideoLog</span><span>.</span><span class="n">query</span><span class="p">()</span><span>.</span><span class="n">filter</span><span class="p">(</span>
        <span class="n">UserVideoLog</span><span>.</span><span class="n">user</span> <span>==</span> <span class="n">user</span><span class="p">,</span>
        <span class="n">UserVideoLog</span><span>.</span><span class="n">finished_watching</span><span>=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">user</span><span>.</span><span class="n">video_count</span> <span>+=</span> <span class="n">video_query</span><span>.</span><span class="n">count</span><span class="p">()</span>  <span># ILLEGAL</span>
    <span class="n">user</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> <p>This restriction has hit Khan Academy hard. As with the idempotence requirement, it's particularly onerous when using transactions in higher-level code, which calls helper functions that do queries. We have one API endpoint that we call when a user successfully completes an exercise, which updates a lot of state: the list of exercises a user has done, of course, but also their proficiency model, list of future recommended exercises, user notifications, etc. Many of these updates require datastore queries, often in helper functions buried deep in the call-stack. As a result, we cannot use transactions to atomically update the user-state upon exercise completion.</p> </div> <div class="section" id="locking-a-transaction-alternative"> <h2>Locking: a transaction alternative</h2> <p>At Khan Academy, we have developed an alternative to transactions, which we are introducing today, complete with <a class="reference external" href="/supporting-files/lock_util.py">source code</a>. This alternative uses a simple locking scheme in lieu of transactions. It works with transactions: for a given datastore model, you can decide if you want to use transactions or locking to protect its atomicity. If you have a function that updates two entities, one of which requires a transaction and the other of which requires a lock, you can make your function both transactional and lock-acquiring; the two can co-exist.</p> <p>Locks are a simple way to ensure atomicity for a single entity: while you hold the lock for an entity, nobody else can read or write the entity. It is easy to see how this ensures atomic operation. (This is a simplification; I discuss below how we allow concurrent read-only operations while a lock is being held.)</p> <p>As this simple description makes clear, locks have several disadvantages:</p> <ul class="simple"> <li>Unless your locks are very fine-grained, forcing other applications to wait while you hold a lock is less efficient than transactions</li> <li>When acquiring multiple locks, you have to worry about deadlock</li> <li>Locks do not use rollbacks, meaning they cannot guarantee &quot;both or neither&quot; update semantics</li> <li>Writing a global lockservice is actually quite hard</li> </ul> <p>These problems are all solvable, as described below. And the advantages locks have -- intuitive data-access, no restrictions on datastore queries -- make them very appealing in the right situations.</p> </div> <div class="section" id="how-our-locks-work"> <h2>How our locks work</h2> <p>The pubic API is very simple:</p> <pre class="code python literal-block">
<span class="k">class</span> <span class="nc">FinishedExercise</span><span class="p">(</span><span class="n">RequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">lock_util</span><span>.</span><span class="n">global_lock</span><span class="p">(</span><span class="n">key</span><span>=</span><span class="n">user_id</span><span class="p">,</span>
                                   <span class="n">wait_timeout</span><span>=</span><span class="mi">5</span><span class="p">):</span>
            <span class="n">user</span> <span>=</span> <span class="n">GetUser</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
            <span class="n">update_exercise_stats</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
            <span>...</span>
</pre> <p>Now the finished-exercise API call will only run once it has acquired the lock for <tt class="docutils literal">user_id</tt> from the lockservice. In the meantime, no other code that acquires the lock for <tt class="docutils literal">user_id</tt> can run until this routine has finished. If we are unable to acquire the lock within 5 seconds, <tt class="docutils literal">global_lock</tt> raises an exception.</p> <p>While I describe this mechanism as a &quot;lock&quot; mechanism, it would be more accurately described as a lease: when you acquire the lock, the lockservice only promises it to you for a certain amount of time. This works well in the context of App Engine because App Engine will abort a request that takes too long (a minute for &quot;frontend&quot; requests, 10 minutes for &quot;backend&quot; requests). We hard-code that knowledge into <tt class="docutils literal">lock_util</tt>, though you can override it using the <tt class="docutils literal">lock_timeout</tt> parameter. By using a leasing model, we ensure that a bug or networking error can't cause a lock to be held forever.</p> <p>The locking code logs when a lock was acquired and released, and if there was contention when acquiring it. This has had a surprising benefit to us: it's made it significantly easier to diagnose the sources of contention than it was with transactions.</p> </div> <div class="section" id="when-do-locks-make-sense"> <h2>When do locks make sense?</h2> <p>Transactions are more efficient than locks because typically locks are too coarse. At Khan Academy, we use a single lock for a user, which protects all datastore entities associated with that user. So if one function wants to update a UserData entity, while the other wants to update a UserVideoLog entity, they could both run in parallel in a transaction world but would block each other in a locking world.</p> <p>A per-user lock works well for us because typically a Khan Academy user is only doing one thing at a time. So it's unlikely that two processes would want to update two different user-specific entities in parallel. (But see &quot;batch processing,&quot; below.)</p> <p>In general we consider transactions to be superior to locks when they work: when a model only needs protection in idempotent, low-level, query-free code. When possible, we'll use transacations even for per-user models. Likewise, we've never replaced existing uses of transactions with locks. Instead, we use locks to protect code that previously ran entirely unprotected.</p> <p>In our experience, a user lock is the most useful kind of lock to have: it's unusual for two parallel requests to both be modifying information about a single user, and there are typically many datastore entities associated with a single user. Acquiring a single lock for the user at the beginning of the request can yield a lot of datastore safety with very little cognitive cost.</p> </div> <div class="section" id="avoiding-deadlock"> <h2>Avoiding deadlock</h2> <p>Whenever you acquire multiple locks at once, you have the potential for deadlock. At Khan Academy we attempt to avoid deadlock by having a canonical order in which we acquire locks: first we acquire the lock for the &quot;current&quot; user, then any children they have, then their coach, etc. If that doesn't work, the deadlock will be broken when a lease expires.</p> <p>That said, only rarely do we need to acquire multiple locks in a single request. If we used more kinds of locks than just a user lock, this might become more of an issue.</p> </div> <div class="section" id="using-locks-with-transactions"> <h2>Using locks with transactions</h2> <p>Locks do not guarantee &quot;both or neither&quot; semantics. Consider this code:</p> <pre class="code python literal-block">
<span class="k">def</span> <span class="nf">watched_video_locked</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">video</span><span class="p">):</span>
     <span class="k">with</span> <span class="n">lock_util</span><span>.</span><span class="n">acquire_lock</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
         <span class="n">user</span> <span>=</span> <span class="n">GetUser</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
         <span class="n">user</span><span>.</span><span class="n">num_videos_watched</span> <span>+=</span> <span class="mi">1</span>
         <span class="n">user</span><span>.</span><span class="n">put</span><span class="p">()</span>
         <span class="n">video_log</span> <span>=</span> <span class="n">GetUserVideoLog</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
         <span class="n">video_log</span><span>.</span><span class="n">add_watched_video</span><span class="p">(</span><span class="n">video</span><span class="p">)</span>
         <span class="n">video_log</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> <p>If <tt class="docutils literal">add_watched_video</tt> throws an exception, we'll end up with <tt class="docutils literal">num_videos_watched</tt> being updated but the video_log <em>not</em> being updated.</p> <p>The solution is simple: use a transaction as well.</p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">watched_video_locked</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">video</span><span class="p">):</span>
     <span class="k">with</span> <span class="n">lock_util</span><span>.</span><span class="n">acquire_lock</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
         <span>...</span>
</pre> <p>If we still have to use a transaction, what benefit is the lock? The answer is: we can use transactions more sparingly, in places where their restrictions are less onerous. In particular, at Khan Academy we now use transactions only in low-level code, after we've done the datastore queries we need to do, and in addition we do not have to worry about all the problems (described above) that arise with &quot;nested&quot; transactions.</p> </div> <div class="section" id="our-global-lockservice-memcache"> <h2>Our global lockservice: memcache</h2> <p>Implementing a reliable, global lockservice is not a trivial task. Google has one it uses internally, called Chubby, but it is not made available to App Engine users. So we had to develop our own, application-layer lockservice. We did it using memcache.</p> <p>On the face of it, memcache is a terrible choice for a lockservice, because by design it does not guarantee that inserted items remain in the cache. It's not very useful to have a lockservice that's always forgetting about your locks!</p> <p>But in practice, this has not been a problem. Locks are very small, so are unlikely to fill a memcache by themselves. And any reasonable memcache implementation is going to evict old entries before new ones. Locks, by our design, are short-lived -- 10 minutes at most -- so are unlikely to be evicted. (To be sure, I would feel less confident were Khan Academy using a shared memcache instead of a dedicated instance.)</p> <p>The bigger problem with memcache is that you communicate with it over the network, and the network can be flaky. While memcache evictions have not been a problem, failed memcache writes are a fact of life for us. We have to be careful handling them, since we do not want our entire site to go down if memcache is unreachable. We've chosen to continue optimistically -- assume we have the lock even though memcache has not confirmed it -- risking the potential for non-atomic writes in order to gain site reliability.</p> <p>On the plus side, memcache supports the operations a locking service needs: atomic reads and writes, shared state across processes, and fast access.</p> <p>We implement the locking via busy-waiting: we do an atomic memcache-create of the lock-key, and if it fails (meaning someone else is holding the lock), we wait a second and then try again. Once it succeeds, we hold the lock. At the end of the request, we do an atomic memcache-delete to release the lock. The &quot;lease&quot; functionality comes automatically with memcache: when we create the memcache entry, we do so with a timeout, causing memcache to automatically flush the entry if we do not manually delete it first.</p> </div> <div class="section" id="batch-processing"> <h2>Batch processing</h2> <p>I mentioned above that the user-lock works well for us because typically only one process is trying to access a single user at a time. There's one big exception to this rule though: batch processes that run over all our users. For instance, we have a nightly cronjob that can award users time-based badges (&quot;You've used Khan Academy every day this month!&quot;). It's very possible for a user's interactive requests to run at the same time as the batch request hits that user.</p> <p>To maintain interactive behavior in that situation, we have a simple form of lock priority: locks can either say they are for interactive tasks, or batch tasks. (In practice, we determine this automatically based on the url of the current request, but it could easily be an input parameter.)</p> <p>We implement the priority scheme by having batch processes wait 1.1 seconds before first trying to acquire the lock. Since any concurrent client for the lock is retrying the memcache-create once a second, this guarantees anyone else waiting will have a chance to acquire the lock before the batch process does. While interactive processes can still starve each other, batch processes cannot starve interactive ones.</p> </div> <div class="section" id="allowing-read-only-datastore-access"> <h2>Allowing read-only datastore access</h2> <p>There remains one final situation I promised to address: what to do with read-only access. You don't <em>need</em> to acquire a lock for read-only access, and in general you don't want to, so that two processes can read the same data the same time. The trouble is the code can't tell <em>a priori</em> that an access is going to be read-only (and indeed, a data access in a low-level function might be read-only in some cases but part of a read-write pattern in others). We could require applications to tell the locking system if an access was read-only or not, but that's onerous and brittle. We'd like to do what transactions do, and automatically figure out if a read was read-only or not at write-time, and to handle things appropriately in either case.</p> <p>We can't do that, but we can get close, by using runtime assertions.</p> <p>Our basic scheme is to allow a process to read an entity without holding the lock. That is, we assume <em>all</em> reads are made by read-only processes. But we also keep track of the fact that that process has read that entity without holding a lock. If the process then ever tries to <tt class="docutils literal">put()</tt> the entity, we notice it had done a prior read without a lock, and complain loudly at that time.</p> <p>The fundamental idea here is that a process has to know if an entity-read might lead to a subsequent write. If so, it is the application's responsibility to acquire the lock before the read. We have some runtime checks to make sure that happens.</p> </div> <div class="section" id="but-wait-there-s-more"> <h2>But wait, there's more...</h2> <p>How these runtime checks are implemented in App Engine is a fascinating story in its own right. Stay tuned for our next blog post, where I talk about that in a lot more detail.</p> <p>In the meantime, if you're interested in the source code for our locking scheme, <a class="reference external" href="/supporting-files/lock_util.py">have at it</a>! The uber-high-level <cite>fetch_under_user_write_lock()</cite> function requires some code from the next blog post, but the rest of it is usable today.</p> </div> </div> </div> </article> <div class="keep-reading-buttons"> <div class="keep-reading-cell keep-reading-left"> <div class="button prev-post-button team-eng-leads"> <div class="header">previous post</div> <a href="/posts/engineering-principles.htm" class="post-title">Khan Academy's Engineering Principles</a> </div> </div> <div class="keep-reading-cell keep-reading-right"> <div class="button next-post-button team-infrastructure"> <div class="header">next post</div> <a href="/posts/transaction-safety.htm" class="post-title">Ensuring transaction-safety in Google App Engine</a> </div> </div> </div> </main> <script>document.getElementById("mobile-menu-button").onclick=function(){var e=document.body,t=document.getElementById("left-bar"),a=document.getElementById("content");"mobile-visible"===t.className?(e.className="",t.className="",a.className=""):(e.className="mobile-menu-visible",t.className="mobile-visible",a.className="mobile-hidden")};var totallyActivated=!1;document.getElementById("activate-tota11y").onclick=function(){if(totallyActivated)console.log("Tota11y already activated. Doing nothing.");else{var e=document.createElement("script");e.src="/javascript/tota11y.min.js",document.head.appendChild(e),totallyActivated=!0}},function(e,t,a,n,c,l,o){e.GoogleAnalyticsObject=c,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,l=t.createElement(a),o=t.getElementsByTagName(a)[0],l.async=1,l.src="//www.google-analytics.com/analytics.js",o.parentNode.insertBefore(l,o)}(window,document,"script",0,"ga"),ga("create","UA-65856931-1","auto"),ga("send","pageview");</script> </body> </html> 