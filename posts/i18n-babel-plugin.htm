<!DOCTYPE html> <html> <head> <title>Babel in Khan Academy's i18n Toolchain | Khan Academy Engineering</title> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta name="description" content="We're the engineers behind Khan Academy. We're building a free, world-class education for anyone, anywhere.">  <style>#left-bar .bio a,#left-bar .logo a{text-decoration:none}#left-bar .logo,#left-bar .subscription-info{text-align:left}.c,.c1,.cm,.cs,.ge{font-style:italic}body,html{height:100%;margin:0}body{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;background-color:#FEFEFE;font-size:14px;width:920px}@media (max-width:920px){body{width:100%}body.mobile-menu-visible{background-color:#252F3D}}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.inline-author-photo{height:1.6em;width:1.6em;border-radius:.8em;vertical-align:middle;margin-right:4px}.font-awesome-svg{width:1em;height:1em;display:inline-block}#left-bar{box-sizing:border-box;display:table-cell;background-color:#252F3D;color:#f0f0f0;width:325px;padding:10px 35px 35px}@media (max-width:920px){#left-bar{display:block;width:100%;padding:0 20px}#left-bar.mobile-visible{padding-bottom:60px}#left-bar:not(.mobile-visible) section{display:none}}#left-bar .logo{font-family:"Arial Black","Arial Bold",Gadget,sans-serif;font-size:28px;letter-spacing:1px;line-height:1em;margin-bottom:6px;margin-left:-2px;margin-top:0;text-transform:uppercase}#left-bar .logo a{color:#f0f0f0}#left-bar .logo.mobile{font-size:24px;display:none}@media (max-width:920px){#left-bar .logo.mobile{display:block}#left-bar .logo.mobile a{padding:11px 20px 15px;margin:0 -20px -15px;display:block;text-decoration:none;color:#f0f0f0}#left-bar .logo.mobile svg{opacity:.8;margin-right:-2px;margin-top:1px;height:25px}#left-bar .logo.mobile .text,#left-bar .logo.mobile svg{vertical-align:middle}#left-bar .logo{display:none}}#left-bar .logo .engineering{color:#9cb53b}#left-bar .bio{font-size:12px;line-height:1.4;margin-top:10px}#left-bar .bio,#left-bar .bio *{color:#dbdcde}#left-bar .bio a:hover{text-decoration:underline}#left-bar .subscription-info .links{font-size:24px}#left-bar .subscription-info .links a{margin-right:7px;text-decoration:none;color:#f0f0f0}#left-bar .subscription-info .links a:hover{border-bottom:1px solid #f0f0f0}#left-bar .subscription-info .links .email{margin-top:-1px}#left-bar .section-heading{color:#dbdcde;font-size:12px;font-weight:300;letter-spacing:.5px;margin-top:40px;text-transform:lowercase}#left-bar .post-blurb{margin-top:30px;padding-bottom:4px;border-left:1px solid transparent;padding-left:10px;margin-left:-10px}@media (max-width:920px){#left-bar .post-blurb{border-left:10px solid transparent;padding-left:17px;margin-left:-26px}}#left-bar .post-blurb:first-of-type{margin-top:20px}#left-bar .post-blurb.team-infrastructure{border-color:#E57281}#left-bar .post-blurb.team-web-frontend{border-color:#63BBD9}#left-bar .post-blurb.team-eng-leads{border-color:#ccc}#left-bar .post-blurb.team-design{border-color:#ab59c6}#left-bar .post-blurb .title{font-weight:400;margin:0 0 9px}#left-bar .post-blurb .title a{color:#f0f0f0;text-decoration:none}#left-bar .post-blurb .title a:hover{text-decoration:underline}#left-bar .post-blurb .info{font-size:12px}#left-bar .post-blurb .info .author-link{color:#f0f0f0;text-decoration:none;font-weight:700;font-size:11px}#left-bar .post-blurb .info .author-link:hover{text-decoration:underline}#left-bar .meta-section .link-list{margin:0 0 0 4px;padding:0;list-style-type:square}#left-bar .meta-section .link-list li{margin-bottom:10px}#left-bar .meta-section .link-list li a{margin-left:-4px}#left-bar .meta-section .link-list a{color:#f0f0f0;text-decoration:none}#left-bar .meta-section .link-list a:hover{text-decoration:underline}#content{display:table-cell;padding:10px 35px 35px 50px;color:#404040}@media (max-width:920px){#left-bar .meta-section .link-list{list-style-type:none}#content{padding:10px 20px 50px;display:block}#content.mobile-hidden{display:none}}#content .title{letter-spacing:1px;margin-bottom:8px;font-size:28px;line-height:1}#content .info .author-link{color:#404040;font-weight:700;text-decoration:none}#content .info .author-link:hover{text-decoration:underline}#content .info .team-tag{border-radius:.3em;padding:.3em .8em;font-size:.7em;font-weight:500;display:inline-block;color:#fff;margin-left:4px;margin-right:4px}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}#content .info .team-tag.web-frontend{background-color:#63BBD9}#content .body{margin-top:30px;line-height:1.5;width:500px}@media (max-width:920px){#content .body{width:100%}}#content .body a{color:#6c7d28;text-decoration:none}#content .body a:hover{text-decoration:underline}#content .body img{max-width:100%}#content .keep-reading-buttons{display:table;margin-top:30px;width:100%}#content .keep-reading-buttons .keep-reading-cell{display:table-cell;margin:0;padding:0;vertical-align:top;width:50%}#content .keep-reading-buttons .keep-reading-right{text-align:right}#content .keep-reading-buttons .button{padding:3px 0;display:inline-block;max-width:90%;color:#404040}#content .keep-reading-buttons .button .header{font-size:12px;color:#767676}#content .keep-reading-buttons .button .post-title{margin-top:8px;color:#6c7d28;text-decoration:none;display:block}#content .keep-reading-buttons .button .post-title:hover{text-decoration:underline}#content .keep-reading-buttons .button.next-post-button{border-right:2px solid;padding-right:10px;margin-right:-10px}#content .keep-reading-buttons .button.prev-post-button{border-left:2px solid;padding-left:10px;margin-left:-10px}#content .keep-reading-buttons .button.team-infrastructure{border-color:#E57281}#content .keep-reading-buttons .button.team-web-frontend{border-color:#63BBD9}#content .keep-reading-buttons .button.team-eng-leads{border-color:#ccc}#content .keep-reading-buttons .button.team-design{border-color:#ab59c6}.code,.codehilite{background-color:#EEE;border-radius:6px;border:1px solid #CCC;overflow-x:auto;padding:6px}.code .ln,.codehilite .ln{color:#AAA}.label{margin-top:1.5em}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style>  </head> <body> <div id="left-bar"> <h1 class="logo"> <a href="/"><span aria-label="Khan Academy">KA</span> <span class="engineering">Engineering</span></a> </h1> <h1 class="logo mobile">  <a id="mobile-menu-button" href="javascript: void 0"> <svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1664 1344v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45z" fill="#fff"/></svg> <span class="text"><span aria-label="Khan Academy">KA</span> <span class="engineering">Engineering</span></span> </a> </h1> <section class="bio"> We're the engineers behind <a href="https://www.khanacademy.org">Khan Academy</a>. We're building a free, world-class education for anyone, anywhere. </section> <section class="subscription-info"> <h2 class="section-heading">Subscribe</h2> <div class="links"> <a href="https://twitter.com/KAEngineering"><span class="sr-only">Subscribe with Twitter</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z" fill="#fff"/></svg></a> <a href="/rss.xml"><span class="sr-only">Subscribe with RSS</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M576 1344q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm512 123q2 28-17 48-18 21-47 21h-135q-25 0-43-16.5t-20-41.5q-22-229-184.5-391.5t-391.5-184.5q-25-2-41.5-20t-16.5-43v-135q0-29 21-47 17-17 43-17h5q160 13 306 80.5t259 181.5q114 113 181.5 259t80.5 306zm512 2q2 27-18 47-18 20-46 20h-143q-26 0-44.5-17.5t-19.5-42.5q-12-215-101-408.5t-231.5-336-336-231.5-408.5-102q-25-1-42.5-19.5t-17.5-43.5v-143q0-28 20-46 18-18 44-18h3q262 13 501.5 120t425.5 294q187 186 294 425.5t120 501.5z" fill="#fff"/></svg></a> </div> </section> <section> <h2 class="section-heading">Upcoming fortnightly post</h2> <div class="post-blurb team-infrastructure"> <h3 class="title">Forgo JavaScript packaging? Not so fast.</h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <span class="sr-only">by</span> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on November 23<sup aria-hidden="true">rd</sup> </div> </div> </section> <section> <h2 class="section-heading">Latest posts</h2> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/switching-to-slack.htm">Switching to Slack</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benjaminpollack.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bitquabit.com/">Benjamin Pollack</a> on November 9<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/receiving-feedback.htm">Receiving feedback as an intern at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/davidwang.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://ourracingthoughts.com/author/d15w/">David Wang</a> on October 26<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/translation-server.htm">Schrödinger's deploys no more: how we update translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/chelseavoss.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://csvoss.github.io/">Chelsea Voss</a> on October 12<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/i18nize-templates.htm">i18nize-templates: Internationalization After the Fact</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on September 28<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/making-thumbnails-fast.htm">Making thumbnails fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on September 14<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/copy-pasting-more-than-just-text.htm">Copy-pasting more than just text</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/samlau.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/SamLau95">Sam Lau</a> on August 31<sup aria-hidden="true">st</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/no-cheating-allowed.htm">No cheating allowed!!</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/philliplemons.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://philliplemons.com/">Phillip Lemons</a> on August 17<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-design"> <h3 class="title"> <a href="/posts/fun-with-slopfields.htm">Fun with slope fields, css and react</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/marcosojeda.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://generic.cx/">Marcos Ojeda</a> on August 5<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-employees-primer.htm">Khan Academy: a new employee's primer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/rileyshaw.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://rileyjshaw.com">Riley Shaw</a> on July 20<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/evil-puzzle.htm">How wooden puzzles can destroy dev teams</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/johnsullivan.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/brownhead">John Sullivan</a> on July 6<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/i18n-babel-plugin.htm">Babel in Khan Academy's i18n Toolchain</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on June 22<sup aria-hidden="true">nd</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/tota11y.htm">tota11y - an accessibility visualization toolkit</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jordanscales.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/jdan">Jordan Scales</a> on June 8<sup aria-hidden="true">th</sup> </div> </div> </section> <section class="meta-section"> <h2 class="section-heading">Meta</h2> <ul class="link-list"> <li><a href="https://github.com/Khan/engblog">About this blog</a></li> <li><a href="https://www.khanacademy.org/about">KA's mission</a></li> <li><a href="https://github.com/khan/engblog/issues">Report a bug</a></li> <li><a id="activate-tota11y" href="javascript: void 0">Activate tota11y</a></li> </ul> </section> </div> <main id="content"> <article class="post"> <h1 class="title">Babel in Khan Academy's i18n Toolchain</h1> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <span class="sr-only">by</span> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on June 22<sup aria-hidden="true">nd</sup> </div> <div class="body"> <div class="document"> <p>We've been using ES6 (along with JSX) for sometime at Khan Academy. Right now, we're using <a class="reference external" href="https://github.com/facebook/jstransform">jstransform</a> to compile our ES6 and JSX code to ES5, but we'd like to switch to <a class="reference external" href="http://babeljs.io/">babel</a>. Some of the reasons for doing this include:</p> <ul class="simple"> <li>better support for ES6 + ES7</li> <li>allows us to use <a class="reference external" href="https://github.com/babel/babel-eslint">eslint</a>, making it easier for open source contributors to lint their code and run the tests in projects such as <a class="reference external" href="https://github.com/Khan/perseus">perseus</a>.</li> </ul> <div class="section" id="i18n-workflow"> <h2>i18n Workflow</h2> <p>Our i18n workflow on the frontend uses a custom plugin for jstransform which converts certain JSXElements into special function calls.</p> <p class="label"><strong>input</strong>:</p> <pre class="code literal-block">
&lt;$_ first=&quot;Hayao&quot; last=&quot;Miyazaki&quot;&gt;
    Hello, %(first)s %(last)s
&lt;/$_&gt;
&lt;$i18nDoNotTranslate&gt;var x = 5;&lt;/$i18nDoNotTranslate&gt;
</pre> <p class="label"><strong>desired output</strong>:</p> <pre class="code javascript literal-block">
<span class="nx">$_</span><span class="p">({</span> <span class="nx">first</span><span>:</span> <span class="s2">&quot;Hayao&quot;</span><span class="p">,</span> <span class="nx">last</span><span>:</span> <span class="s2">&quot;Miyazaki&quot;</span> <span class="p">},</span>
    <span class="s2">&quot;Hello, %(first)s %(last)s!&quot;</span>
<span class="p">);</span>
<span class="nx">$i18nDoNotTranslate</span><span class="p">(</span><span class="s2">&quot;var x = 5;&quot;</span><span class="p">);</span>
</pre> <p>While babel has support for JSX, it transforms all JSXElements into calls to <tt class="docutils literal">React.createElement()</tt>. This would result in the following incorrect output:</p> <p class="label"><strong>actual output</strong>:</p> <pre class="code javascript literal-block">
<span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
    <span class="nx">$_</span><span class="p">,</span>
    <span class="p">{</span> <span class="nx">first</span><span>:</span> <span class="s2">&quot;Motoko&quot;</span><span class="p">,</span> <span class="nx">last</span><span>:</span> <span class="s2">&quot;Kusanagi&quot;</span> <span class="p">},</span>
    <span class="s2">&quot;Hello, %(first)s %(last)s!&quot;</span>
<span class="p">);</span>
<span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">$i18nDoNotTranslate</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span>
    <span class="s2">&quot;var x = 5&quot;</span><span class="p">);</span>
</pre> </div> <div class="section" id="plugin"> <h2>Plugin</h2> <p>Before we can switch to babel, we need to customize babel's output when it encounters <tt class="docutils literal">&lt;$_&gt;</tt> or <tt class="docutils literal">&lt;$i18nDoNotTranslate&gt;</tt> tag. We can use babel's <a class="reference external" href="http://babeljs.io/docs/advanced/plugins/">plugin architecture</a>.</p> <p>It's relatively straight forward. Each plugin is a node module which exports a single function which returns a <tt class="docutils literal">babel.Transformer</tt> instance. <tt class="docutils literal">babel.Transformer</tt> takes two arguments: the name of the transformer as a string and an object containing callbacks.</p> <pre class="code javascript literal-block">
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span>=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">babel</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">t</span> <span>=</span> <span class="nx">babel</span><span class="p">.</span><span class="nx">types</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">babel</span><span class="p">.</span><span class="nx">Transformer</span><span class="p">(</span><span class="s2">&quot;i18n-plugin&quot;</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">JSXElement</span><span>:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// inspect node, parent, scope, etc.
</span>            <span class="c1">// construct a tree and return its root
</span>
            <span class="c1">// example:
</span>            <span class="c1">// construct a new &quot;CallExpression&quot;
</span>            <span class="c1">// assumes callee and args exist
</span>            <span class="kd">var</span> <span class="nx">call</span> <span>=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">callExpression</span><span class="p">(</span><span class="nx">callee</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>

            <span class="c1">// copy the location from the source node
</span>            <span class="c1">// so that line numbers can be maintained
</span>            <span class="nx">call</span><span class="p">.</span><span class="nx">loc</span> <span>=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">loc</span><span class="p">;</span>
            <span class="k">return</span> <span class="nx">call</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre> <p>After the JavaScript source is parsed, babel will run the callback on each node it finds in the AST of the specified type. An AST (<a class="reference external" href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>) is a tree structure where each node represents a part of the syntatic structure of a piece of code such as statements, expressions, identifiers, literals, etc. The keys for the object should be one of the node types listed in the <a class="reference external" href="https://github.com/babel/babel/blob/master/src/babel/types/visitor-keys.json">babel source</a>. This list of nodes extends Mozilla's original <a class="reference external" href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API">Parser API</a>.</p> <p>Some notes about the example:</p> <ul class="simple"> <li>babel.types provides functions for creating new nodes</li> <li>babel also supports calling on exit, or calling on both enter and exit if needed</li> <li>full source code for the plugin as available in <a class="reference external" href="https://github.com/Khan/i18n-babel-plugin">Khan/i18n-babel-plugin</a>.</li> </ul> </div> <div class="section" id="matching-output"> <h2>Matching Output</h2> <p>When developing this plugin it was important that we match the output we were getting from jstransform so that babel could be a drop-in replacement without having to modify other parts of our build chain. In particular we needed to ensure that we were maintaining both line numbers in compiled code as well as whitespace within translation strings.</p> <div class="section" id="line-numbers"> <h3>Line Numbers</h3> <p>Maintaining line numbers is important because not all of our build chain is source map aware. In particular kake, our custom build system, does not know how to deal with source maps. Babel's &quot;retainLines&quot; options takes care of this for us.</p> <p>We did however find one issue with &quot;retainLines&quot;. If a method call had 3 or more arguments then Babel would ignore &quot;retainLines&quot; and pretty print it so that each argument was on a separate line. Babel's maintainer sebmck was quite responsive and provided an update within a couple of hours.</p> </div> <div class="section" id="whitespace"> <h3>Whitespace</h3> <p>As for whitespace within localized strings, any changes in the whitespace means that the string is essentially a different string which means that that string would need to be re-translated into different languages for all our localized sites.</p> <p>In order to make sure that our Babel plugin produces calls to <tt class="docutils literal">$_()</tt> with the same strings as jstransform we need to compare all of the JavaScript strings. One of our build steps generates a .pot file (used by Gettext <a class="reference external" href="http://en.wikipedia.org/wiki/Gettext">http://en.wikipedia.org/wiki/Gettext</a>) containing all of the strings on the site that need to be localized. We generated .pot files using both the jstransform and babel workflows and compared them using a python script.</p> <p>The script uses <a class="reference external" href="https://pypi.python.org/pypi/polib">polib</a> to parse the .pot files generated by the two workflows and iterate through the entries. It looks at the occurrences property to pick out the items that came from javascript and creates a dict from msgid-&gt;entry.</p> <p class="label"><strong>example.pot</strong>:</p> <pre class="code literal-block">
#: modules/user/views_handler_filter_user_name.inc:29
msgid &quot;Enter a comma separated list of user names.&quot;
msgstr &quot;&quot;
#: modules/user/views_handler_filter_user_name.inc:112
msgid &quot;Unable to find user: &#64;users&quot;
msgid_plural &quot;Unable to find users: &#64;users&quot;
msgstr[0] &quot;&quot;
msgstr[1] &quot;&quot;
</pre> <p>We then compared the two dicts and looked for differences in occurrences or strings. There were a few discrepancies in line numbers which had to be investigated manually. It turned out that the jstransform line numbers were off by a line from the source line numbers. While this was not an issue, there were quite a few strings that weren't the same. Close inspection of these revealed that the differences were differences in whitespace.</p> <p>Various patterns of carriage returns and spaces were producing the differences in whitespace. Creating test cases (and fixes) for a few of these situations and then re-running our string comparison script allowed us to quickly narrow the large number of mismatched strings into a relatively few test cases. Below are two fixtures used by the harness which compiles <strong>input.jsx</strong> using our babel plugin and compares the output against <strong>expected.js</strong>.</p> <p class="label"><strong>test/fixtures/i18n-line-feed/input.jsx</strong>:</p> <pre class="code literal-block">
<span class="ln"> 1 </span>var a = &lt;$_&gt;hello,
<span class="ln"> 2 </span>        world!
<span class="ln"> 3 </span>        &lt;/$_&gt;;
<span class="ln"> 4 </span>var b = &lt;$_&gt;
<span class="ln"> 5 </span>
<span class="ln"> 6 </span>        hello,
<span class="ln"> 7 </span>        world!&lt;/$_&gt;;
<span class="ln"> 8 </span>var c = &lt;$_&gt;
<span class="ln"> 9 </span>        {&quot;hello, &quot;}
<span class="ln">10 </span>        world!
<span class="ln">11 </span>        &lt;/$_&gt;;
<span class="ln">12 </span>var d = &lt;$_&gt;
<span class="ln">13 </span>hello, world!&lt;/$_&gt;;
</pre> <p class="label"><strong>test/fixtures/i18n-line-feed/expected.js</strong>:</p> <pre class="code javascript literal-block">
<span class="ln"> 1 </span><span class="kd">var</span> <span class="nx">a</span> <span>=</span> <span class="nx">$_</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hello, world!&quot;</span><span class="p">);</span>
<span class="ln"> 2 </span>
<span class="ln"> 3 </span>
<span class="ln"> 4 </span><span class="kd">var</span> <span class="nx">b</span> <span>=</span> <span class="nx">$_</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hello, world!&quot;</span><span class="p">);</span>
<span class="ln"> 5 </span>
<span class="ln"> 6 </span>
<span class="ln"> 7 </span>
<span class="ln"> 8 </span><span class="kd">var</span> <span class="nx">c</span> <span>=</span> <span class="nx">$_</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span>
<span class="ln"> 9 </span><span class="s2">&quot;hello, &quot;</span><span class="p">,</span> <span class="s2">&quot;world!&quot;</span><span class="p">);</span>
<span class="ln">10 </span>
<span class="ln">11 </span>
<span class="ln">12 </span><span class="kd">var</span> <span class="nx">d</span> <span>=</span> <span class="nx">$_</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hello, world!&quot;</span><span class="p">);</span>
</pre> </div> </div> <div class="section" id="issues"> <h2>Issues</h2> <p>We also wanted to make sure that all of JavaScript was being compiled correctly before rolling out these changes to all of our developers. We had already refactored our build scripts to compile our ES6 and JSX files so that we could extract localizable strings.</p> <div class="section" id="let"> <h3>let</h3> <p>We started with manual testing. The homepage wasn't loading. Uh-oh. Investigation revealed that the compiled code contained the <tt class="docutils literal">let</tt> keyword which most browsers don't support. What's weird about this is that we didn't use <tt class="docutils literal">let</tt> in any of source code. Where was it coming from?</p> <p>In the new build script we specify a whitelist of transformers for babel to use. This list is conservative. We wanted to match the functionality of jstransform and then adopt other features on an &quot;as needed&quot; basis. Here's the initial list of transformers we were using:</p> <ul class="simple"> <li>es6.arrowFunctions</li> <li>es6.classes</li> <li>es6.destructuring</li> <li>es6.parameters.rest</li> <li>es6.templateLiterals</li> <li>es6.spread</li> <li>es7.objectRestSpread</li> </ul> <p>After doing some hunting I found out that some of the es6 transfomers actually desugar ES6 to other ES6. In this case the es6.classes transformer was producing code with <tt class="docutils literal">let</tt>.</p> <p class="label"><strong>source.js</strong>:</p> <pre class="code javascript literal-block">
<span class="kr">class</span> <span class="nx">MyAwesomeClass</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</pre> <p class="label"><strong>compiled.js</strong>:</p> <pre class="code javascript literal-block">
<span class="kd">let</span> <span class="nx">MyAwesomeClass</span> <span>=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</pre> <p>The fix was pretty simple, add <tt class="docutils literal">es6.blockScoping</tt> to the whitelist.</p> </div> <div class="section" id="functionname-transformer-shadows-globals"> <h3>functionName transformer shadows globals</h3> <p>The next issue we ran into was with a seemingly innocuous method. Here's the full mixin to give some context:</p> <p class="label"><strong>set-interval-mixin.js</strong>:</p> <pre class="code javascript literal-block">
<span class="kd">var</span> <span class="nx">SetIntervalMixin</span> <span>=</span> <span class="p">{</span>
    <span class="nx">componentWillMount</span><span>:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">intervals</span> <span>=</span> <span class="p">[];</span>
    <span class="p">},</span>
    <span class="nx">setInterval</span><span>:</span> <span class="kd">function</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">intervals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>
    <span class="p">},</span>
    <span class="nx">componentWillUnmount</span><span>:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">intervals</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">clearInterval</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre> <p>It adds a setInterval method to other classes and makes sure that the intervals are cleaned up with the component unmounts.</p> <p>The issue is that <tt class="docutils literal">setInterval</tt> was being transformed to this:</p> <pre class="code javascript literal-block">
<span class="nx">setInterval</span><span>:</span> <span class="kd">function</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
<span class="p">}</span>
</pre> <p>By default babel turns anonymous function expressions into named function expressions. In most cases this wouldn't be an issue, but in this case the named function shadows the global <tt class="docutils literal">setInterval</tt>. When the <tt class="docutils literal">setInterval</tt> method is called on the object it ends up calling itself. The second time it's called, <tt class="docutils literal">this</tt> is bound to <tt class="docutils literal">window</tt> and it blows up.</p> <p>This issue was fixed after I erroneously reported it as a React bug and Ben Alpert correctly reported it as a babel bug and Sebastian McKenzie, maintainer of babel, fixed it.</p> </div> </div> <div class="section" id="summary"> <h2>Summary</h2> <p>We're looking forward to use babel so that we can leverage the power of ES6's new features. Babel's plugin architecture is easy and helped maintain our i18n workflow without a lot of work. The minor issues that did crop up were quickly resolved.</p> </div> <div class="section" id="thanks"> <h2>Thanks</h2> <p>We'd like to thank babel's maintainer Sebastian McKenzie for the quick turnaround when it came to dealing with issues in babel. Also, Ben Alpert was helpful in pointing out edge cases we hadn't thought about.</p> </div> </div> </div> </article> <div class="keep-reading-buttons"> <div class="keep-reading-cell keep-reading-left"> <div class="button prev-post-button team-web-frontend"> <div class="header">previous post</div> <a href="/posts/tota11y.htm" class="post-title">tota11y - an accessibility visualization toolkit</a> </div> </div> <div class="keep-reading-cell keep-reading-right"> <div class="button next-post-button team-web-frontend"> <div class="header">next post</div> <a href="/posts/evil-puzzle.htm" class="post-title">How wooden puzzles can destroy dev teams</a> </div> </div> </div> </main> <script>document.getElementById("mobile-menu-button").onclick=function(){var e=document.body,t=document.getElementById("left-bar"),a=document.getElementById("content");"mobile-visible"===t.className?(e.className="",t.className="",a.className=""):(e.className="mobile-menu-visible",t.className="mobile-visible",a.className="mobile-hidden")};var totallyActivated=!1;document.getElementById("activate-tota11y").onclick=function(){if(totallyActivated)return void console.log("Tota11y already activated. Doing nothing.");var e=document.createElement("script");e.src="/javascript/tota11y.min.js",document.head.appendChild(e),totallyActivated=!0},function(e,t,a,n,c,o,l){e.GoogleAnalyticsObject=c,e[c]=e[c]||function(){(e[c].q=e[c].q||[]).push(arguments)},e[c].l=1*new Date,o=t.createElement(a),l=t.getElementsByTagName(a)[0],o.async=1,o.src=n,l.parentNode.insertBefore(o,l)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-65856931-1","auto"),ga("send","pageview");</script> </body> </html> 