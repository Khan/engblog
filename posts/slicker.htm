<!DOCTYPE html> <html> <head> <title>Slicker: A Tool for Moving Things in Python | Khan Academy Engineering</title> <link rel="icon" href="/images/favicon.ico"> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta name="description" content="We're the engineers behind Khan Academy. We're building a free, world-class education for anyone, anywhere.">  <style>#left-bar,#left-bar .logo a{color:#f0f0f0}#left-bar .bio a,#left-bar .logo a{text-decoration:none}#left-bar .logo,#left-bar .subscription-info{text-align:left}.caption,caption,figcaption{font-style:italic}body,html{height:100%;margin:0}body{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;background-color:#FEFEFE;font-size:14px;width:920px}@media (max-width:920px){body{width:100%}body.mobile-menu-visible{background-color:#252F3D}}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.inline-author-photo{height:1.6em;width:1.6em;border-radius:.8em;vertical-align:middle;margin-right:4px}.font-awesome-svg{width:1em;height:1em;display:inline-block}#left-bar{box-sizing:border-box;display:table-cell;background-color:#252F3D;width:325px;padding:10px 35px 35px}@media (max-width:920px){#left-bar{display:block;width:100%;padding:0 20px}#left-bar.mobile-visible{padding-bottom:60px}#left-bar:not(.mobile-visible) section{display:none}}#left-bar .logo{font-family:"Arial Black","Arial Bold",Gadget,sans-serif;font-size:28px;letter-spacing:1px;line-height:1em;margin-bottom:6px;margin-left:-2px;margin-top:0;text-transform:uppercase}#left-bar .logo.mobile{font-size:24px;display:none}@media (max-width:920px){#left-bar .logo.mobile{display:block}#left-bar .logo.mobile a{padding:11px 20px 15px;margin:0 -20px -15px;display:block;text-decoration:none;color:#f0f0f0}#left-bar .logo.mobile svg{opacity:.8;margin-right:-2px;margin-top:1px;height:25px}#left-bar .logo.mobile .text,#left-bar .logo.mobile svg{vertical-align:middle}#left-bar .logo{display:none}}#left-bar .logo .engineering{color:#9cb53b}#left-bar .bio{font-size:12px;line-height:1.4;margin-top:10px}#left-bar .bio,#left-bar .bio *{color:#dbdcde}#left-bar .bio a:hover{text-decoration:underline}#left-bar .subscription-info .links{font-size:24px}#left-bar .subscription-info .links a{margin-right:7px;text-decoration:none;color:#f0f0f0}#left-bar .subscription-info .links a:hover{border-bottom:1px solid #f0f0f0}#left-bar .subscription-info .links .email{margin-top:-1px}#left-bar .section-heading{color:#dbdcde;font-size:12px;font-weight:300;letter-spacing:.5px;margin-top:40px;text-transform:lowercase}#left-bar .post-blurb{margin-top:30px;padding-bottom:4px;border-left:1px solid transparent;padding-left:10px;margin-left:-10px}@media (max-width:920px){#left-bar .post-blurb{border-left:10px solid transparent;padding-left:17px;margin-left:-26px}}#left-bar .post-blurb:first-of-type{margin-top:20px}#left-bar .post-blurb.team-infrastructure{border-color:#E57281}#left-bar .post-blurb.team-web-frontend{border-color:#63BBD9}#left-bar .post-blurb.team-mobile{border-color:#63BB81}#left-bar .post-blurb.team-eng-leads{border-color:#ccc}#left-bar .post-blurb.team-design{border-color:#ab59c6}#left-bar .post-blurb.team-wtf{border-color:#ff00af}#left-bar .post-blurb .title{font-weight:400;margin:0 0 9px}#left-bar .post-blurb .title a{color:#f0f0f0;text-decoration:none}#left-bar .post-blurb .title a:hover{text-decoration:underline}#left-bar .post-blurb .info{font-size:12px}#left-bar .post-blurb .info .author-link{color:#f0f0f0;text-decoration:none;font-weight:700;font-size:11px}#left-bar .post-blurb .info .author-link:hover{text-decoration:underline}#left-bar .meta-section .link-list{margin:0 0 0 4px;padding:0;list-style-type:square}#left-bar .meta-section .link-list li{margin-bottom:10px}#left-bar .meta-section .link-list li a{margin-left:-4px}#left-bar .meta-section .link-list a{color:#f0f0f0;text-decoration:none}#left-bar .meta-section .link-list a:hover{text-decoration:underline}#content{display:table-cell;padding:10px 35px 35px 50px;color:#404040}@media (max-width:920px){#left-bar .meta-section .link-list{list-style-type:none}#content{padding:10px 20px 50px;display:block}#content.mobile-hidden{display:none}}#content .title a{letter-spacing:1px;margin-bottom:8px;font-size:28px;line-height:1;color:#404040;text-decoration:none}#content .title a:focus,#content .title a:hover{text-decoration:underline}#content .info .author-link{color:#404040;font-weight:700;text-decoration:none}#content .info .author-link:hover{text-decoration:underline}#content .info .team-tag{border-radius:.3em;padding:.3em .8em;font-size:.7em;font-weight:500;display:inline-block;color:#fff;margin-left:4px;margin-right:4px}#content .info .team-tag.web-frontend{background-color:#63BBD9}#content .body{margin-top:30px;line-height:1.5;width:500px}@media (max-width:920px){#content .body{width:100%}}#content .body a{color:#6c7d28;text-decoration:none}#content .body a:hover{text-decoration:underline}#content .body img{max-width:100%}#content .keep-reading-buttons{display:table;margin-top:30px;width:100%}#content .keep-reading-buttons .keep-reading-cell{display:table-cell;margin:0;padding:0;vertical-align:top;width:50%}progress,sub,sup{vertical-align:baseline}#content .keep-reading-buttons .keep-reading-right{text-align:right}#content .keep-reading-buttons .button{padding:3px 0;display:inline-block;max-width:90%;color:#404040}.align-center,details{display:block}#content .keep-reading-buttons .button .header{font-size:12px;color:#767676}#content .keep-reading-buttons .button .post-title{margin-top:8px;color:#6c7d28;text-decoration:none;display:block}#content .keep-reading-buttons .button .post-title:hover,abbr[title]{text-decoration:underline}#content .keep-reading-buttons .button.next-post-button{border-right:2px solid;padding-right:10px;margin-right:-10px}#content .keep-reading-buttons .button.prev-post-button{border-left:2px solid;padding-left:10px;margin-left:-10px}#content .keep-reading-buttons .button.team-infrastructure{border-color:#E57281}#content .keep-reading-buttons .button.team-web-frontend{border-color:#63BBD9}#content .keep-reading-buttons .button.team-eng-leads{border-color:#ccc}#content .keep-reading-buttons .button.team-design{border-color:#ab59c6}.code,.codehilite{background-color:#EEE;border-radius:6px;border:1px solid #CCC;overflow-x:auto;padding:6px;margin:14px 0}.code .ln,.codehilite .ln{color:#AAA}.label{margin-top:1.5em}.caption{text-align:center}caption,table.data-table th{text-align:left}.align-center{margin-left:auto;margin-right:auto}.literal,code{word-wrap:break-word}caption{caption-side:bottom}table.data-table{margin:0 auto}table.data-table td{text-align:right}table.data-table td,table.data-table th{padding:0 5px;white-space:nowrap}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}.x-scrollable{overflow-x:auto}button,hr,input{overflow:visible}/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}textarea{overflow:auto}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.c,.c1,.cm,.cs,.ge{font-style:italic}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}summary{display:list-item}[hidden],template{display:none}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style>  </head> <body> <div id="left-bar"> <h1 class="logo"> <a href="/"><span aria-label="Khan Academy">KA</span> <span class="engineering">Engineering</span></a> </h1> <h1 class="logo mobile">  <a id="mobile-menu-button" href="javascript: void 0"> <svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1664 1344v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45z" fill="#fff"/></svg> <span class="text"><span aria-label="Khan Academy">KA</span> <span class="engineering">Engineering</span></span> </a> </h1> <section class="bio"> We're the engineers behind <a href="https://www.khanacademy.org">Khan Academy</a>. We're building a free, world-class education for anyone, anywhere. </section> <section class="subscription-info"> <h2 class="section-heading">Subscribe</h2> <div class="links"> <a href="https://twitter.com/KAEngineering"><span class="sr-only">Subscribe with Twitter</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z" fill="#fff"/></svg></a> <a href="/rss.xml"><span class="sr-only">Subscribe with RSS</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M576 1344q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm512 123q2 28-17 48-18 21-47 21h-135q-25 0-43-16.5t-20-41.5q-22-229-184.5-391.5t-391.5-184.5q-25-2-41.5-20t-16.5-43v-135q0-29 21-47 17-17 43-17h5q160 13 306 80.5t259 181.5q114 113 181.5 259t80.5 306zm512 2q2 27-18 47-18 20-46 20h-143q-26 0-44.5-17.5t-19.5-42.5q-12-215-101-408.5t-231.5-336-336-231.5-408.5-102q-25-1-42.5-19.5t-17.5-43.5v-143q0-28 20-46 18-18 44-18h3q262 13 501.5 120t425.5 294q187 186 294 425.5t120 501.5z" fill="#fff"/></svg></a> </div> </section> <section> <h2 class="section-heading">Latest posts</h2> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/architects-at-khan.htm">What do software architects at Khan Academy do?</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on May 14<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/khanalytics.htm">New data pipeline management platform at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ragini.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/guptaragini">Ragini Gupta</a> on April 30<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-3.htm">Untangling our Python Code</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/carter.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://carterjbastian.com/">Carter J. Bastian</a> on April 16<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/slicker.htm">Slicker: A Tool for Moving Things in Python</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on April 2<sup aria-hidden="true">nd</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-1.htm">The Great Python Refactor of 2017 And Also 2018</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on March 19<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/working-remotely.htm">Working Remotely</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/scottgrant.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/scotchfield">Scott Grant</a> on Oct 2, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/tips-for-code-reviews.htm">Tips for giving your first code reviews</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/hannah.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://hannahblumberg.com/">Hannah Blumberg</a> on Sep 18, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/lets-reduce.htm">Let's Reduce! A Gentle Introduction to Javascript's Reduce Method</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/joshcomeau.jpeg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/joshwcomeau">Josh Comeau</a> on Jul 10, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/creating-query-components-with-apollo.htm">Creating Query Components with Apollo</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Jun 12, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/react-native-monorepo.htm">Migrating to a Mobile Monorepo for React Native</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jared.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jaredforsyth.com/">Jared Forsyth</a> on May 29, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-fms.htm">Memcached-Backed Content Infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 15, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-profiling.htm">Profiling App Engine Memcached</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 1, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/flex-language-shootout.htm">App Engine Flex Language Shootout</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/amos-latteier.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/latteier">Amos Latteier</a> on Apr 17, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-oss-activity.htm">What's New in OSS at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Apr 3, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/automating-app-store-screenshots.htm">Automating App Store Screenshots</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on Mar 27, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/its-okay-to-break-things.htm">It's Okay to Break Things: Reflections on Khan Academy's Healthy Hackathon</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kimeriegreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/Kimerie">Kimerie Green</a> on Mar 6, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/interning-at-khan-academy.htm">Interning at Khan Academy: from student to intern</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/shadajladdad.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://shadaj.me">Shadaj Laddad</a> on Dec 12, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/prototyping-with-framer.htm">Prototyping with Framer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/nickbreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/MrNickBreen">Nick Breen</a> on Oct 3, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/evolving-our-content-infrastructure.htm">Evolving our content infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 19, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/a-really-small-app.htm">Building a Really, Really Small Android App</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/charliemarsh.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.crmarsh.com">Charlie Marsh</a> on Aug 22, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/a-case-for-time-tracking.htm">A Case for Time Tracking: Data Driven Time-Management</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/olivernorthwood.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/allofthenorthwood">Oliver Northwood</a> on Aug 8, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/time-management-multiple-authors.htm">Time Management at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers">Several Authors</a> on Jul 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/healthy-hackathons.htm">Hackathons Can Be Healthy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/tomyedwab.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.arguingwithalgorithms.com">Tom Yedwab</a> on Jul 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/transaction-safety.htm">Ensuring transaction-safety in Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 27, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/user-write-lock.htm">The User Write Lock: an Alternative to Transactions for Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 20, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/engineering-principles.htm">Khan Academy's Engineering Principles</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkamens.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bjk5.com">Ben Kamens</a> on Jun 6, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/shortest-regex.htm">Minimizing the length of regular expressions, in practice</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on May 23, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/introducing-swifttweaks.htm">Introducing SwiftTweaks</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on May 9, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/autonomous-dumbledore.htm">The Autonomous Dumbledore</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/evykassirer.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.evykassirer.com/">Evy Kassirer</a> on Apr 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/career-development.htm">Engineering career development at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/beneater.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/beneater">Ben Eater</a> on Apr 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/aphrodite-inline-css.htm">Inline CSS at Khan Academy: Aphrodite</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jamiewong.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jamie-wong.com">Jamie Wong</a> on Mar 29, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/starting-android.htm">Starting Android at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkomalo.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/benkomalo">Ben Komalo</a> on Feb 29, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/translation_assistant.htm">Automating Highly Similar Translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Feb 15, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/snippet-server.htm">The weekly snippet-server: open-sourced</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Feb 1, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/stories-from-interns.htm">Stories from our latest intern class</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers/interns">2015 Interns</a> on Dec 21, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/kanbanning-learnstorm-dev-process.htm">Kanbanning the LearnStorm Dev Process</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on Dec 7, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/js-packaging-http2.htm">Forgo JS packaging? Not so fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Nov 23, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/switching-to-slack.htm">Switching to Slack</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benjaminpollack.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bitquabit.com/">Benjamin Pollack</a> on Nov 9, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/receiving-feedback.htm">Receiving feedback as an intern at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/davidwang.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://ourracingthoughts.com/author/d15w/">David Wang</a> on Oct 26, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/translation-server.htm">Schrödinger's deploys no more: how we update translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/chelseavoss.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://csvoss.github.io/">Chelsea Voss</a> on Oct 12, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/i18nize-templates.htm">i18nize-templates: Internationalization After the Fact</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Sep 28, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/making-thumbnails-fast.htm">Making thumbnails fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 14, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/copy-pasting-more-than-just-text.htm">Copy-pasting more than just text</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/samlau.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/SamLau95">Sam Lau</a> on Aug 31, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/no-cheating-allowed.htm">No cheating allowed!!</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/philliplemons.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://philliplemons.com/">Phillip Lemons</a> on Aug 17, 2015 </div> </div> <div class="post-blurb team-design"> <h3 class="title"> <a href="/posts/fun-with-slopfields.htm">Fun with slope fields, css and react</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/marcosojeda.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://generic.cx/">Marcos Ojeda</a> on Aug 5, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-employees-primer.htm">Khan Academy: a new employee's primer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/rileyshaw.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://rileyjshaw.com">Riley Shaw</a> on Jul 20, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/evil-puzzle.htm">How wooden puzzles can destroy dev teams</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/johnsullivan.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/brownhead">John Sullivan</a> on Jul 6, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/i18n-babel-plugin.htm">Babel in Khan Academy's i18n Toolchain</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Jun 22, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/tota11y.htm">tota11y - an accessibility visualization toolkit</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jordanscales.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/jdan">Jordan Scales</a> on Jun 8, 2015 </div> </div> </section> <section class="meta-section"> <h2 class="section-heading">Meta</h2> <ul class="link-list"> <li><a href="https://github.com/Khan/engblog">About this blog</a></li> <li><a href="https://www.khanacademy.org/about">KA's mission</a></li> <li><a href="https://github.com/khan/engblog/issues">Report a bug</a></li> <li><a id="activate-tota11y" href="javascript: void 0">Activate tota11y</a></li> </ul> </section> </div> <main id="content"> <article class="post"> <h1 class="title"> <a href="/posts/slicker.htm"> Slicker: A Tool for Moving Things in Python </a> </h1> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <span class="sr-only">by</span> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on April 2<sup aria-hidden="true">nd</sup> </div> <div class="body"> <p>Craig talked <a href="/posts/python-refactor-1.htm">last post</a> about our project to reorganize our whole Python codebase. This entails a lot of architectural challenges – deciding where to put each file, prioritizing which files and classes to split, and so on – which Carter will talk about more in the final post of this series. Today, I want to set all that aside to focus on the more mechanical process of moving: what does it take to move thousands of files, classes, and functions, each of which may be referenced by dozens or hundreds of others? We ended up writing a tool called <a href="https://github.com/Khan/slicker">Slicker</a> to do it all, and the remainder of this post talks about why we needed it and how it works.</p> <h2>The Problem</h2> <p>To understand what we need to do, let's start out with a simple application for creating and viewing articles like those on <a href="https://www.khanacademy.org/humanities/us-history/road-to-revolution/creating-a-nation/a/the-federalist-papers">Khan Academy</a>.<sup id="fnref:codebase"><a class="footnote-ref" href="#fn:codebase" rel="footnote">1</a></sup></p> <div class="codehilite"><pre><span class="c"># models.py</span>
<span class="kn">from</span> <span class="nn">google.appengine.ext</span> <span class="kn">import</span> <span class="n">ndb</span>  <span class="c"># the ORM we use</span>

<span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">ndb</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">ndb</span><span class="o">.</span><span class="n">StringProperty</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_article_by_id</span><span class="p">(</span><span class="n">article_id</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Article</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</pre></div> <div class="codehilite"><pre><span class="c"># views.py</span>
<span class="kn">import</span> <span class="nn">current_user</span>
<span class="kn">import</span> <span class="nn">models</span>

<span class="k">def</span> <span class="nf">display_article</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">get_article_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="c"># build some HTML based on `a`</span>

<span class="k">def</span> <span class="nf">create_article</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">models</span><span class="o">.</span><span class="n">Article</span><span class="p">(</span><span class="n">author</span><span class="o">=</span><span class="n">current_user</span><span class="o">.</span><span class="n">get</span><span class="p">(),</span> <span class="o">...</span><span class="p">)</span>
</pre></div> <p>Maybe we're about to add a bunch of other types of content – <a href="https://www.khanacademy.org/math/basic-geo/basic-geometry-shapes/basic-geo-properties-shapes/v/sides-corners">videos</a>, <a href="https://www.khanacademy.org/computing/computer-programming/programming/arrays/p/project-make-it-rain">projects</a>, and so on – so we want to move <code>models.py</code> to <code>content/article.py</code>. The move itself is easy in this case: no changes to the file are necessary so we just move it. Over in <code>views.py</code>, we need some changes: we need to replace all those calls to <code>models.*</code> with <code>articles.*</code>, and correspondingly <code>import models</code> with <code>from content import articles</code>. Then, to keep our imports nice and sorted, we need to move that changed import up a line.</p> <div class="codehilite"><pre> # views.py
<span class="gi">+from content import article</span>
 import current_user
<span class="gd">-import models</span>

 def display_article(id):
<span class="gd">-    a = models.get_article_by_id(id)</span>
<span class="gi">+    a = article.get_article_by_id(id)</span>
     # build some HTML based on `a`

 def create_article(...):
<span class="gd">-    return models.Article(author=current_user.get(), ...)</span>
<span class="gi">+    return article.Article(author=current_user.get(), ...)</span>
</pre></div> <p>This diff is easy to write manually, but we wanted to do this for thousands of files. How?</p> <p>We started by looking at existing tools. <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>'s refactoring tools are indeed pretty powerful, but they didn't work out for us for several reasons. First, PyCharm doesn't do a perfect job of fixing up all the right references. For example, when I tried the above move with PyCharm, it successfully moved the definitions of <code>Article</code> and <code>get_article_by_id</code> to <code>content/article.py</code>, but it didn't move the import of <code>ndb</code> – it just deleted it. I'm sure we could work around that particular bug, but it wasn't the only one.<sup id="fnref:bug"><a class="footnote-ref" href="#fn:bug" rel="footnote">2</a></sup> Second, PyCharm didn't know about our <a href="https://github.com/Khan/style-guides/blob/master/style/python.md#imports">style guide</a> so we had to further modify most of the imports it added. You might think that would be a quick process, but if PyCharm writes <code>from content.article import Article</code> everywhere (such that the code uses <code>Article</code> unqualified), and we want to change it to use <code>from content import article</code> and reference <code>article.Article</code>, that's almost as much work as the original move! Finally, PyCharm's refactoring tools can only be used through their IDE interface and are somewhat slow; it was very convenient to be able to <code>git reset</code> and rerun a set of Slicker commands and quickly if we decided to do things a little differently halfway through.</p> <p><a href="https://github.com/python-rope/rope">Rope</a>, which aims to do something similar but as a plugin for other editors, is more scriptable but otherwise had similar problems. And, surprisingly, that's about it: there aren't too many more options out there suited to this sort of use case.<sup id="fnref:other"><a class="footnote-ref" href="#fn:other" rel="footnote">3</a></sup> In comparison to some languages, the Python community doesn't seem to have the same quantity and quality of automated code-rewriting tools.</p> <h2>The Old Way</h2> <p>Left to our own devices, we started off using handwritten Perl and sed scripts, modified for each commit we operated on. For example, in this case, we could have done:</p> <div class="codehilite"><pre>git grep -E -l <span class="s1">&#39;models\.(Article|get_article_by_id)&#39;</span> <span class="se">\</span>
    <span class="p">|</span> xargs sed -i <span class="s1">&#39;s/models\.(Article|get_article_by_id)/article.\1/g&#39;</span>
</pre></div> <p>This doesn't fix up imports – luckily we already had a <a href="https://github.com/Khan/fix-includes">tool</a> to do some of the work; a few shell "one-liners" would parse our linter's output and pass it to <code>fix-includes</code> which would make the requisite changes. And this was a simple case: we were moving the entire file, there was no other file in the codebase with a similar name, the imports we needed to fix all had the same syntax, with no <code>from</code> or <code>as</code>, and they were all at the top of the file, never inside a function. Each of those complications would have required another few scripts, or a bunch of manual fixes.</p> <p>Nothing beats the flexibility of tools like sed for a one-off change, but for similar operations on thousands of files, this strategy isn't sustainable. So I started hacking together a script that would do some of the job for us. After a few Friday afternoons, I was using it for all the moves I was doing, with some success. Once it became clear this could make our task much easier, <a href="https://github.com/Khan/slicker">Slicker</a> graduated from a quick hack to a more serious tool, focused on one thing: moving things around in Python codebases.</p> <h2>Slicker</h2> <p>Slicker follows a similar approach, but is much more precise. It starts by parsing each file's imports, checking whether any of them match the thing we want to move. If they do, it searches the entire file for references that use those imports, and if so, updates both import and reference accordingly. It does all of this, across your whole codebase, in a few seconds in most cases.</p> <p>Here's a more complicated case: let's say we've got a bunch of other ways of getting articles, too, and we want to move those to a separate <code>article_getters.py</code>. We ask Slicker to move <code>content.article.get_article_by_id</code> to <code>content.article_getters</code>. Now, what does it need to do? It deletes the definition from <code>content/article.py</code> – easy enough – and adds it to <code>article_getters.py</code>:</p> <div class="codehilite"><pre><span class="c"># content/article_getters.py</span>
<span class="k">def</span> <span class="nf">get_article_by_id</span><span class="p">(</span><span class="n">article_id</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Article</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</pre></div> <p>You may notice a problem here: a <code>NameError: name 'Article' is not defined</code>! We have to add a new import at the top of the new file (e.g. <code>from content import article</code><sup id="fnref:from"><a class="footnote-ref" href="#fn:from" rel="footnote">4</a></sup>) and then replace <code>Article</code> with <code>article.Article</code>:</p> <div class="codehilite"><pre><span class="c"># content/article_getters.py</span>
<span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">article</span>

<span class="k">def</span> <span class="nf">get_article_by_id</span><span class="p">(</span><span class="n">article_id</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">article</span><span class="o">.</span><span class="n">Article</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</pre></div> <p>In other cases, we might have had to update references to <code>get_article_by_id</code> elsewhere in <code>article.py</code>, adding an import similarly. Now, with the function itself moved, we need to clean up the references. This time, since the <code>from content import article</code> is still used by <code>create_article</code>, we don't remove it; we add <code>from content import article_getters</code> by its side.</p> <div class="codehilite"><pre> # views.py
 from content import article
<span class="gi">+from content import article_getters</span>
 import current_user

 def display_article(id):
<span class="gd">-    a = article.get_article_by_id(id)</span>
<span class="gi">+    a = article_getters.get_article_by_id(id)</span>
     # build some HTML based on `a`

 def create_article(...):
     return article.Article(author=current_user.get(), ...)
</pre></div> <p>Slicker encapsulates all of this work in a simple tool so you don't have to think about it.<sup id="fnref:workflow"><a class="footnote-ref" href="#fn:workflow" rel="footnote">5</a></sup></p> <h2>Fun Edge Cases</h2> <p>Ahh, edge cases. Python is nice, for our purposes, in that it has a fairly simple syntax so we don't have to look for many different ways of referring to functions. But it's still got plenty of fun edge cases. Some of these, Slicker handles; some, it does something that's good enough; some it ignores or warns the user.</p> <p>Here's a fun one: if we have two files <code>content/article.py</code> and <code>content/exercise.py</code>, the following is legal Python:</p> <div class="codehilite"><pre><span class="kn">import</span> <span class="nn">content.article</span>

<span class="n">content</span><span class="o">.</span><span class="n">exercise</span><span class="o">.</span><span class="n">get_exercise_by_name</span><span class="p">(</span><span class="s">&#39;addition-1&#39;</span><span class="p">)</span>
</pre></div> <p>Or rather, it's legal python as long as <code>content/article.py</code> or some other file that has already been run imports <code>content/exercise.py</code>. Once <code>content.exercise</code> is loaded, everybody who imported anything from <code>content</code> has access to it. Making use of this isn't a great pattern – one generally doesn't write code like the above intentionally – but Pyflakes <a href="https://github.com/PyCQA/pyflakes/issues/137">doesn't notice</a>, and after a while these sorts of things build up. (We discovered them after a few moves; in many cases things will work just fine until you try to remove <code>content/article.py</code> entirely, at which point the import will fail.)</p> <p>Slicker needs a lot of code dedicated to handling this case. In particular, when we <a href="https://github.com/Khan/slicker/blob/master/slicker/model.py#L207">look</a> for which imports in the file could possibly have brought in the symbol you moved, we have to include any import of a module from the same package. We then look for code referencing those imports similar to how we would for a normal import.</p> <p>Another fun case is code like this, common in tests:</p> <div class="codehilite"><pre><span class="kn">import</span> <span class="nn">mock</span>

<span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">article</span>

<span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;content.article.get_article_by_id&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_test</span><span class="p">(</span><span class="n">mock_get_article</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">get_article_by_id</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
    <span class="o">...</span>
</pre></div> <p>If we move <code>get_article_by_id</code>, we need to update the argument to <code>mock.patch</code>. We knew about this issue from our very first moves, but for a while, we didn't even try to fix it – string literals are used in many contexts and it's hard to know when we should change any given piece of text. But it turns out we can do pretty well: we <a href="https://github.com/Khan/slicker/blob/master/slicker/replacement.py#L24">look</a> for string literals matching the fully-qualified name (<code>content.article.get_article_by_id</code>), the name as imported in this file (<code>article.get_article_by_id</code>) or the filename (<code>content/article.py</code>), looking carefully at what comes before and after to avoid false positives. Furthermore, if the module is toplevel (e.g. <code>views.py</code>), we only look for its name as an entire string, so that we won't try to update the string <code>'Someone views the page'</code>, but will still update <code>mock.patch('views')</code>. This isn't perfect, but it's pretty close, and it's a common enough pattern in our codebase to be worth doing. Of course, we'll miss code that does <code>mock.mock('content.article.get_article_by_%s' % 'id')</code>, but that's super rare in comparison. These fixes include docstrings; we also fix up <a href="https://github.com/Khan/slicker/blob/master/slicker/replacement.py#L241">comments</a> in a similar fashion.</p> <p>For another case where we do something imperfect but close enough, suppose you have:</p> <div class="codehilite"><pre><span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">article</span>

<span class="k">def</span> <span class="nf">get_article</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">article</span><span class="o">.</span><span class="n">get_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>  <span class="c"># `article` is an imported module</span>

<span class="k">def</span> <span class="nf">render_article</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="n">article</span> <span class="o">=</span> <span class="n">get_article</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">article</span><span class="o">.</span><span class="n">render</span><span class="p">()</span>  <span class="c"># `article` is a local variable</span>
</pre></div> <p>Knowing whether <code>article</code> refers to the module (as in the first case) or a variable (as in the second) requires very careful tracing of variable scopes, which we <a href="https://github.com/Khan/slicker/issues/19">haven't yet implemented</a>. We just do the best we can, and often, it's good enough. Sometimes we change our code to avoid this pattern entirely; it's confusing for humans too.<sup id="fnref:avoid"><a class="footnote-ref" href="#fn:avoid" rel="footnote">6</a></sup></p> <p>Lastly, some edge cases are clearly impossible to handle. For example, if you do:</p> <div class="codehilite"><pre><span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">article</span>
<span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">exercise</span>

<span class="k">def</span> <span class="nf">get_anything_by_id</span><span class="p">(</span><span class="n">content_type</span><span class="p">,</span> <span class="n">content_id</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">content_type</span> <span class="o">==</span> <span class="s">&#39;article&#39;</span><span class="p">:</span>
        <span class="n">content_module</span> <span class="o">=</span> <span class="n">article</span>
    <span class="k">else</span><span class="p">:</span>  <span class="c"># content_type == &#39;exercise&#39;</span>
        <span class="n">content_module</span> <span class="o">=</span> <span class="n">exercise</span>
    <span class="k">return</span> <span class="n">content_module</span><span class="o">.</span><span class="n">get_by_id</span><span class="p">(</span><span class="n">content_id</span><span class="p">)</span>
</pre></div> <p>If we want to change the name of <code>article.get_by_id()</code>, but not <code>exercise.get_by_id()</code>, we actually have to do some refactoring here. (In this case, we'd likely just do <code>article.get_by_id(content_id)</code> in the <code>if</code>, and similarly in the else, which is clearer anyway. Then Slicker could do its work.) Such a refactor isn't hard, but it's far too complex to do automatically. For these, we don't try; where we can, we warn the user. They're luckily rare in real code, although not unheard of.</p> <h2>Some Parting Thoughts</h2> <p>Python is a pretty interesting language to work with for this sort of thing. For one, despite being a fairly mature language generally, and having good tooling support in most respects, automated refactoring remains underexplored. JavaScript, for example, has <a href="https://github.com/facebook/jscodeshift">much</a> <a href="https://prettier.io/">more</a> <a href="https://github.com/benjamn/recast">work</a> <a href="http://www.graspjs.com/">in</a> <a href="https://github.com/substack/node-falafel/">this</a> <a href="https://github.com/cpojer/js-codemod">area</a>, perhaps because the language is changing faster so tools are more necessary to keep up.</p> <p>As for the language itself, on the one hand, <a href="https://www.python.org/dev/peps/pep-0020/#id3">"explicit is better than implicit" and "simple is better than complex"</a> help us out a lot: doing <code>from ... import *</code> is thankfully rare enough to not worry about<sup id="fnref:star"><a class="footnote-ref" href="#fn:star" rel="footnote">7</a></sup>, as opposed to some languages where it's the default. (Things like <code>__import__(a_dynamic_string)</code> that are nearly impossible to handle are even rarer.) Dynamic typing is less of a problem than one might think; it means we can't rename methods, but for toplevel functions it's not a big deal. (Of course, you do lose the safety net of a type-checker, and must depend only on unit tests.)</p> <p>Most of the difficulties are around the tooling we build upon. The lack of standardized autoformatting does make code generation harder; we have to worry about where we add whitespace, rather than just doing an AST transform and letting <a href="https://prettier.io/">Prettier</a> handle the rest. Meanwhile, Python's <code>ast</code> and <code>tokenize</code> modules are helpful but they also leave a lot to be desired. (For example they don't tell you which AST node corresponds to which token(s); luckily <a href="https://github.com/gristlabs/asttokens">someone else</a> already solved that problem for us.) So we end up having to do more work than we otherwise might.</p> <p>Structuring Slicker's code to separate concerns and keep things understandable has also been an interesting challenge. For example, we might like to separate updating references within a file from updating imports. But it turns out deciding what import to add is intimately tied up with the changes we make later in the file, and we can't think about one without the other. Similarly, in theory, our layer for doing the actual on-disk file editing (<a href="https://github.com/Khan/slicker/blob/master/slicker/khodemod.py"><code>khodemod.py</code></a>) shouldn't be Python-specific, but even reading a file in <a href="https://github.com/Khan/slicker/blob/master/slicker/khodemod.py#L187">requires</a> looking for the <a href="https://www.python.org/dev/peps/pep-0263/">magic <code>coding: utf-8</code> comment</a>, defaulting to ASCII for Python 2 and <a href="https://www.python.org/dev/peps/pep-3120/">UTF-8</a> for Python 3. Keeping all of this straight in our heads and in code took a lot of refactoring, and it's still not as clean as we'd like.</p> <p>So that's Slicker. If you want to know even more of the gory details, or if you think hacking on this sort of things sounds like fun, check it out on <a href="https://github.com/Khan/slicker">GitHub</a>! We're also <a href="https://www.khanacademy.org/careers">hiring</a>, if you want to get paid to work on interesting problems like these in support of a free, world-class education for anyone, anywhere. Otherwise, tune in next week for more on the benefits of reorganizing our codebase with Slicker. Go forth and refactor!</p> <p><em>Thanks to Carter Bastian, Jacob Hurwitz, Daniel Jackoway, Sarah Lim, and Craig Silverstein for comments on a draft of this post.</em></p> <div class="footnote"> <hr> <ol> <li id="fn:codebase"> <p>All these examples are modified from patterns that exist in our real codebase, although they are of course simplified.&#160;<a class="footnote-backref" href="#fnref:codebase" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p> </li> <li id="fn:bug"> <p>I think in this case PyCharm gets confused because <code>ndb</code> isn't on my <code>PYTHONPATH</code>. (It gets injected elsewhere in our code; some manual configuration could point PyCharm in the right direction.) In another simple case I tried, when moving a function to its own file, PyCharm copied an import to the new file, despite the fact that it wasn't used in the moved function. I suspect this has to do with inadequate handling of the first edge case I discuss below.&#160;<a class="footnote-backref" href="#fnref:bug" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p> </li> <li id="fn:other"> <p>If you know of others, I'd love to <a href="https://twitter.com/bnkrft">hear about them</a>!&#160;<a class="footnote-backref" href="#fnref:other" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p> </li> <li id="fn:from"> <p>By default, Slicker tries to match the style of the import it is replacing – <code>import a.b.c</code> vs. <code>from a.b import c</code> vs. <code>from . import c</code> – but it also has options to prefer one style whenever possible, as we've used in this case. At present, it always imports whole modules (<code>from content import article</code>, not <code>from content.article import Article</code>) to follow Khan Academy's <a href="https://github.com/Khan/style-guides/blob/master/style/python.md#imports">import style</a>, although we <a href="https://github.com/Khan/slicker/issues/22">would like</a> to add more flexibility there.&#160;<a class="footnote-backref" href="#fnref:from" rev="footnote" title="Jump back to footnote 4 in the text">&#8617;</a></p> </li> <li id="fn:workflow"> <p>Combining this with the tools <a href="/posts/python-refactor-1.htm">Craig mentioned</a>, our full workflow has a few more steps. First, we run Slicker to do the move, followed by the pickle-logger generator. Then, run linters and tests and fix issues they uncover, which generally include a bunch of long or misindented lines, and hopefully not too much else. (If you use an autoformatter, it could probably do most of this part.) Next, we send the code out for review. Finally, after code review, we merge from master again, run lint and tests again, and then deploy.&#160;<a class="footnote-backref" href="#fnref:workflow" rev="footnote" title="Jump back to footnote 5 in the text">&#8617;</a></p> </li> <li id="fn:avoid"> <p>Exactly what we do is beyond the scope of this blog post, but we've developed a few patterns. When possible, we try to choose module names that are less likely to cause conflicts. For example, we often use the plural name when it makes sense; <code>users</code> is a much less common variable name than <code>user</code>, in our codebase at least, so it's less likely to conflict. On the other hand, sometimes it's best to just do the more explicit import; in the above sample <code>import content.article</code> avoids this problem. (In fact, we can ask Slicker to write all the imports it changes that way, with <code>-a NONE</code>.)&#160;<a class="footnote-backref" href="#fnref:avoid" rev="footnote" title="Jump back to footnote 6 in the text">&#8617;</a></p> </li> <li id="fn:star"> <p>It would be possible to handle this case, it's just more work (to correctly enumerate the imported names) and hasn't been worth it.&#160;<a class="footnote-backref" href="#fnref:star" rev="footnote" title="Jump back to footnote 7 in the text">&#8617;</a></p> </li> </ol> </div> </div> </article> <div class="keep-reading-buttons"> <div class="keep-reading-cell keep-reading-left"> <div class="button prev-post-button team-infrastructure"> <div class="header">previous post</div> <a href="/posts/python-refactor-1.htm" class="post-title">The Great Python Refactor of 2017 And Also 2018</a> </div> </div> <div class="keep-reading-cell keep-reading-right"> <div class="button next-post-button team-infrastructure"> <div class="header">next post</div> <a href="/posts/python-refactor-3.htm" class="post-title">Untangling our Python Code</a> </div> </div> </div> </main> <script>document.getElementById("mobile-menu-button").onclick=function(){var e=document.body,t=document.getElementById("left-bar"),a=document.getElementById("content");"mobile-visible"===t.className?(e.className="",t.className="",a.className=""):(e.className="mobile-menu-visible",t.className="mobile-visible",a.className="mobile-hidden")};var totallyActivated=!1;document.getElementById("activate-tota11y").onclick=function(){if(totallyActivated)console.log("Tota11y already activated. Doing nothing.");else{var e=document.createElement("script");e.src="/javascript/tota11y.min.js",document.head.appendChild(e),totallyActivated=!0}},function(e,t,a,n,c,l,o){e.GoogleAnalyticsObject=c,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,l=t.createElement(a),o=t.getElementsByTagName(a)[0],l.async=1,l.src="//www.google-analytics.com/analytics.js",o.parentNode.insertBefore(l,o)}(window,document,"script",0,"ga"),ga("create","UA-65856931-1","auto"),ga("send","pageview");</script> </body> </html> 