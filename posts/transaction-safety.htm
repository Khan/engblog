<!DOCTYPE html> <html> <head> <title>Ensuring transaction-safety in Google App Engine | Khan Academy Engineering</title> <link rel="icon" href="/images/favicon.ico"> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta name="description" content="We're the engineers behind Khan Academy. We're building a free, world-class education for anyone, anywhere.">  <style>#left-bar .bio a,#left-bar .logo a{text-decoration:none}#left-bar .logo,#left-bar .subscription-info{text-align:left}.c,.c1,.caption,.cm,.cs,.ge,caption,figcaption{font-style:italic}body,html{height:100%;margin:0}body{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;background-color:#FEFEFE;font-size:14px;width:920px}@media (max-width:920px){body{width:100%}body.mobile-menu-visible{background-color:#252F3D}}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.inline-author-photo{height:1.6em;width:1.6em;border-radius:.8em;vertical-align:middle;margin-right:4px}.font-awesome-svg{width:1em;height:1em;display:inline-block}#left-bar{box-sizing:border-box;display:table-cell;background-color:#252F3D;color:#f0f0f0;width:325px;padding:10px 35px 35px}@media (max-width:920px){#left-bar{display:block;width:100%;padding:0 20px}#left-bar.mobile-visible{padding-bottom:60px}#left-bar:not(.mobile-visible) section{display:none}}#left-bar .logo{font-family:"Arial Black","Arial Bold",Gadget,sans-serif;font-size:28px;letter-spacing:1px;line-height:1em;margin-bottom:6px;margin-left:-2px;margin-top:0;text-transform:uppercase}#left-bar .logo a{color:#f0f0f0}#left-bar .logo.mobile{font-size:24px;display:none}@media (max-width:920px){#left-bar .logo.mobile{display:block}#left-bar .logo.mobile a{padding:11px 20px 15px;margin:0 -20px -15px;display:block;text-decoration:none;color:#f0f0f0}#left-bar .logo.mobile svg{opacity:.8;margin-right:-2px;margin-top:1px;height:25px}#left-bar .logo.mobile .text,#left-bar .logo.mobile svg{vertical-align:middle}#left-bar .logo{display:none}}#left-bar .logo .engineering{color:#9cb53b}#left-bar .bio{font-size:12px;line-height:1.4;margin-top:10px}#left-bar .bio,#left-bar .bio *{color:#dbdcde}#left-bar .bio a:hover{text-decoration:underline}#left-bar .subscription-info .links{font-size:24px}#left-bar .subscription-info .links a{margin-right:7px;text-decoration:none;color:#f0f0f0}#left-bar .subscription-info .links a:hover{border-bottom:1px solid #f0f0f0}#left-bar .subscription-info .links .email{margin-top:-1px}#left-bar .section-heading{color:#dbdcde;font-size:12px;font-weight:300;letter-spacing:.5px;margin-top:40px;text-transform:lowercase}#left-bar .post-blurb{margin-top:30px;padding-bottom:4px;border-left:1px solid transparent;padding-left:10px;margin-left:-10px}@media (max-width:920px){#left-bar .post-blurb{border-left:10px solid transparent;padding-left:17px;margin-left:-26px}}#left-bar .post-blurb:first-of-type{margin-top:20px}#left-bar .post-blurb.team-infrastructure{border-color:#E57281}#left-bar .post-blurb.team-web-frontend{border-color:#63BBD9}#left-bar .post-blurb.team-mobile{border-color:#63BB81}#left-bar .post-blurb.team-eng-leads{border-color:#ccc}#left-bar .post-blurb.team-design{border-color:#ab59c6}#left-bar .post-blurb.team-wtf{border-color:#ff00af}#left-bar .post-blurb .title{font-weight:400;margin:0 0 9px}#left-bar .post-blurb .title a{color:#f0f0f0;text-decoration:none}#left-bar .post-blurb .title a:hover{text-decoration:underline}#left-bar .post-blurb .info{font-size:12px}#left-bar .post-blurb .info .author-link{color:#f0f0f0;text-decoration:none;font-weight:700;font-size:11px}#left-bar .post-blurb .info .author-link:hover{text-decoration:underline}#left-bar .meta-section .link-list{margin:0 0 0 4px;padding:0;list-style-type:square}#left-bar .meta-section .link-list li{margin-bottom:10px}#left-bar .meta-section .link-list li a{margin-left:-4px}#left-bar .meta-section .link-list a{color:#f0f0f0;text-decoration:none}#left-bar .meta-section .link-list a:hover{text-decoration:underline}#content{display:table-cell;padding:10px 35px 35px 50px;color:#404040}@media (max-width:920px){#left-bar .meta-section .link-list{list-style-type:none}#content{padding:10px 20px 50px;display:block}#content.mobile-hidden{display:none}}#content .title a{letter-spacing:1px;margin-bottom:8px;font-size:28px;line-height:1;color:#404040;text-decoration:none}#content .title a:focus,#content .title a:hover{text-decoration:underline}#content .info .author-link{color:#404040;font-weight:700;text-decoration:none}#content .info .author-link:hover{text-decoration:underline}#content .info .team-tag{border-radius:.3em;padding:.3em .8em;font-size:.7em;font-weight:500;display:inline-block;color:#fff;margin-left:4px;margin-right:4px}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}#content .info .team-tag.web-frontend{background-color:#63BBD9}#content .body{margin-top:30px;line-height:1.5;width:500px}@media (max-width:920px){#content .body{width:100%}}#content .body a{color:#6c7d28;text-decoration:none}#content .body a:hover{text-decoration:underline}#content .body img{max-width:100%}#content .keep-reading-buttons{display:table;margin-top:30px;width:100%}#content .keep-reading-buttons .keep-reading-cell{display:table-cell;margin:0;padding:0;vertical-align:top;width:50%}#content .keep-reading-buttons .keep-reading-right{text-align:right}#content .keep-reading-buttons .button{padding:3px 0;display:inline-block;max-width:90%;color:#404040}#content .keep-reading-buttons .button .header{font-size:12px;color:#767676}#content .keep-reading-buttons .button .post-title{margin-top:8px;color:#6c7d28;text-decoration:none;display:block}#content .keep-reading-buttons .button .post-title:hover{text-decoration:underline}#content .keep-reading-buttons .button.next-post-button{border-right:2px solid;padding-right:10px;margin-right:-10px}#content .keep-reading-buttons .button.prev-post-button{border-left:2px solid;padding-left:10px;margin-left:-10px}#content .keep-reading-buttons .button.team-infrastructure{border-color:#E57281}#content .keep-reading-buttons .button.team-web-frontend{border-color:#63BBD9}#content .keep-reading-buttons .button.team-eng-leads{border-color:#ccc}#content .keep-reading-buttons .button.team-design{border-color:#ab59c6}.code,.codehilite{background-color:#EEE;border-radius:6px;border:1px solid #CCC;overflow-x:auto;padding:6px;margin:14px 0}.code .ln,.codehilite .ln{color:#AAA}.label{margin-top:1.5em}.caption{text-align:center}caption,table.data-table th{text-align:left}.align-center{display:block;margin-left:auto;margin-right:auto}.literal,code{word-wrap:break-word}caption{caption-side:bottom}table.data-table{margin:0 auto}table.data-table td{text-align:right}table.data-table td,table.data-table th{padding:0 5px;white-space:nowrap}.x-scrollable{overflow-x:auto}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style>  </head> <body> <div id="left-bar"> <h1 class="logo"> <a href="/"><span aria-label="Khan Academy">KA</span> <span class="engineering">Engineering</span></a> </h1> <h1 class="logo mobile">  <a id="mobile-menu-button" href="javascript: void 0"> <svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1664 1344v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45z" fill="#fff"/></svg> <span class="text"><span aria-label="Khan Academy">KA</span> <span class="engineering">Engineering</span></span> </a> </h1> <section class="bio"> We're the engineers behind <a href="https://www.khanacademy.org">Khan Academy</a>. We're building a free, world-class education for anyone, anywhere. </section> <section class="subscription-info"> <h2 class="section-heading">Subscribe</h2> <div class="links"> <a href="https://twitter.com/KAEngineering"><span class="sr-only">Subscribe with Twitter</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z" fill="#fff"/></svg></a> <a href="/rss.xml"><span class="sr-only">Subscribe with RSS</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M576 1344q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm512 123q2 28-17 48-18 21-47 21h-135q-25 0-43-16.5t-20-41.5q-22-229-184.5-391.5t-391.5-184.5q-25-2-41.5-20t-16.5-43v-135q0-29 21-47 17-17 43-17h5q160 13 306 80.5t259 181.5q114 113 181.5 259t80.5 306zm512 2q2 27-18 47-18 20-46 20h-143q-26 0-44.5-17.5t-19.5-42.5q-12-215-101-408.5t-231.5-336-336-231.5-408.5-102q-25-1-42.5-19.5t-17.5-43.5v-143q0-28 20-46 18-18 44-18h3q262 13 501.5 120t425.5 294q187 186 294 425.5t120 501.5z" fill="#fff"/></svg></a> </div> </section> <section> <h2 class="section-heading">Latest posts</h2> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/architects-at-khan.htm">What do software architects at Khan Academy do?</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on May 14<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/khanalytics.htm">New data pipeline management platform at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ragini.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/guptaragini">Ragini Gupta</a> on April 30<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-3.htm">Untangling our Python Code</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/carter.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://carterjbastian.com/">Carter J. Bastian</a> on April 16<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/slicker.htm">Slicker: A Tool for Moving Things in Python</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on April 2<sup aria-hidden="true">nd</sup> </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-1.htm">The Great Python Refactor of 2017 And Also 2018</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on March 19<sup aria-hidden="true">th</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/working-remotely.htm">Working Remotely</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/scottgrant.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/scotchfield">Scott Grant</a> on Oct 2, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/tips-for-code-reviews.htm">Tips for giving your first code reviews</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/hannah.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://hannahblumberg.com/">Hannah Blumberg</a> on Sep 18, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/lets-reduce.htm">Let's Reduce! A Gentle Introduction to Javascript's Reduce Method</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/joshcomeau.jpeg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/joshwcomeau">Josh Comeau</a> on Jul 10, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/creating-query-components-with-apollo.htm">Creating Query Components with Apollo</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Jun 12, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/react-native-monorepo.htm">Migrating to a Mobile Monorepo for React Native</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jared.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jaredforsyth.com/">Jared Forsyth</a> on May 29, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-fms.htm">Memcached-Backed Content Infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 15, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-profiling.htm">Profiling App Engine Memcached</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 1, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/flex-language-shootout.htm">App Engine Flex Language Shootout</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/amos-latteier.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/latteier">Amos Latteier</a> on Apr 17, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-oss-activity.htm">What's New in OSS at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Apr 3, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/automating-app-store-screenshots.htm">Automating App Store Screenshots</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on Mar 27, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/its-okay-to-break-things.htm">It's Okay to Break Things: Reflections on Khan Academy's Healthy Hackathon</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kimeriegreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/Kimerie">Kimerie Green</a> on Mar 6, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/interning-at-khan-academy.htm">Interning at Khan Academy: from student to intern</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/shadajladdad.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://shadaj.me">Shadaj Laddad</a> on Dec 12, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/prototyping-with-framer.htm">Prototyping with Framer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/nickbreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/MrNickBreen">Nick Breen</a> on Oct 3, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/evolving-our-content-infrastructure.htm">Evolving our content infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 19, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/a-really-small-app.htm">Building a Really, Really Small Android App</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/charliemarsh.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.crmarsh.com">Charlie Marsh</a> on Aug 22, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/a-case-for-time-tracking.htm">A Case for Time Tracking: Data Driven Time-Management</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/olivernorthwood.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/allofthenorthwood">Oliver Northwood</a> on Aug 8, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/time-management-multiple-authors.htm">Time Management at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers">Several Authors</a> on Jul 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/healthy-hackathons.htm">Hackathons Can Be Healthy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/tomyedwab.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.arguingwithalgorithms.com">Tom Yedwab</a> on Jul 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/transaction-safety.htm">Ensuring transaction-safety in Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 27, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/user-write-lock.htm">The User Write Lock: an Alternative to Transactions for Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 20, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/engineering-principles.htm">Khan Academy's Engineering Principles</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkamens.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bjk5.com">Ben Kamens</a> on Jun 6, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/shortest-regex.htm">Minimizing the length of regular expressions, in practice</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on May 23, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/introducing-swifttweaks.htm">Introducing SwiftTweaks</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on May 9, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/autonomous-dumbledore.htm">The Autonomous Dumbledore</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/evykassirer.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.evykassirer.com/">Evy Kassirer</a> on Apr 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/career-development.htm">Engineering career development at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/beneater.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/beneater">Ben Eater</a> on Apr 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/aphrodite-inline-css.htm">Inline CSS at Khan Academy: Aphrodite</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jamiewong.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jamie-wong.com">Jamie Wong</a> on Mar 29, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/starting-android.htm">Starting Android at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkomalo.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/benkomalo">Ben Komalo</a> on Feb 29, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/translation_assistant.htm">Automating Highly Similar Translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Feb 15, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/snippet-server.htm">The weekly snippet-server: open-sourced</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Feb 1, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/stories-from-interns.htm">Stories from our latest intern class</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers/interns">2015 Interns</a> on Dec 21, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/kanbanning-learnstorm-dev-process.htm">Kanbanning the LearnStorm Dev Process</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on Dec 7, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/js-packaging-http2.htm">Forgo JS packaging? Not so fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Nov 23, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/switching-to-slack.htm">Switching to Slack</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benjaminpollack.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bitquabit.com/">Benjamin Pollack</a> on Nov 9, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/receiving-feedback.htm">Receiving feedback as an intern at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/davidwang.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://ourracingthoughts.com/author/d15w/">David Wang</a> on Oct 26, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/translation-server.htm">Schrödinger's deploys no more: how we update translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/chelseavoss.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://csvoss.github.io/">Chelsea Voss</a> on Oct 12, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/i18nize-templates.htm">i18nize-templates: Internationalization After the Fact</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Sep 28, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/making-thumbnails-fast.htm">Making thumbnails fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 14, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/copy-pasting-more-than-just-text.htm">Copy-pasting more than just text</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/samlau.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/SamLau95">Sam Lau</a> on Aug 31, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/no-cheating-allowed.htm">No cheating allowed!!</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/philliplemons.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://philliplemons.com/">Phillip Lemons</a> on Aug 17, 2015 </div> </div> <div class="post-blurb team-design"> <h3 class="title"> <a href="/posts/fun-with-slopfields.htm">Fun with slope fields, css and react</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/marcosojeda.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://generic.cx/">Marcos Ojeda</a> on Aug 5, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-employees-primer.htm">Khan Academy: a new employee's primer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/rileyshaw.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://rileyjshaw.com">Riley Shaw</a> on Jul 20, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/evil-puzzle.htm">How wooden puzzles can destroy dev teams</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/johnsullivan.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/brownhead">John Sullivan</a> on Jul 6, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/i18n-babel-plugin.htm">Babel in Khan Academy's i18n Toolchain</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Jun 22, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/tota11y.htm">tota11y - an accessibility visualization toolkit</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jordanscales.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/jdan">Jordan Scales</a> on Jun 8, 2015 </div> </div> </section> <section class="meta-section"> <h2 class="section-heading">Meta</h2> <ul class="link-list"> <li><a href="https://github.com/Khan/engblog">About this blog</a></li> <li><a href="https://www.khanacademy.org/about">KA's mission</a></li> <li><a href="https://github.com/khan/engblog/issues">Report a bug</a></li> <li><a id="activate-tota11y" href="javascript: void 0">Activate tota11y</a></li> </ul> </section> </div> <main id="content"> <article class="post"> <h1 class="title"> <a href="/posts/transaction-safety.htm"> Ensuring transaction-safety in Google App Engine </a> </h1> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <span class="sr-only">by</span> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 27, 2016 </div> <div class="body"> <div class="document"> <p>In last week's exciting post, I described an <a class="reference external" href="/posts/user-write-lock.htm">alternative to transactions</a> that we use at Khan Academy, to ensure atomic datastore operations.</p> <p>When used correctly, both the user-write lock and transactions are effective at avoiding a particular form of database corruption -- call it &quot;data stomping.&quot; Data stomping happens when two requests try to modify the same datastore entity at the same time.</p> <img alt="/images/txn-timeline.png" class="align-center" src="/images/txn-timeline.png"> <p>Request B does not see A's modifications, and its PUT overwrites A's PUT. A's modifications are entirely lost, even when they don't conflict with B's.</p> <p>Transactions solve this problem by noticing the contention at request B's <tt class="docutils literal">put()</tt> time, and forcing request B to retry from the beginning. Locks solve the problem by not allowing the time-overlap at all.</p> <p>Note that for both techniques, you need to follow the <tt class="docutils literal">GET - MODIFY - PUT</tt> idiom. It is an error -- a db stomping waiting to happen -- to do the <tt class="docutils literal">GET</tt> outside the transaction/lock!</p> <p>In this blog post, I describe the infrastructure we put in place at Khan Academy (which uses Google App Engine) to notice that error, and to make it easy to modify the source code to prevent it. We are making the source code available in two files:</p> <ul class="simple"> <li><a class="reference external" href="/supporting-files/db_hooks.py">db_hooks.py</a>: a generic db/ndb hooking infrastructure</li> <li><a class="reference external" href="/supporting-files/txn_safety.py">txn_safety.py</a>: the specific hooks we use to detect and alert for transaction-safety violations</li> </ul> <div class="section" id="how-do-people-use-transactions-and-locks-wrong"> <h2>How do people use transactions (and locks) wrong?</h2> <p>The mistake people make is simple: they do the <tt class="docutils literal">GET</tt> outside the transaction (or lock). Then when the transaction retries, it doesn't re-GET, so you end up with request B stomping out request A's changes.</p> <p>You may think it's easy to remember to always do your <tt class="docutils literal">GET</tt>'s inside a transaction, but there are many ways to get this wrong:</p> <ul class="simple"> <li>You do the <tt class="docutils literal">PUT</tt> in a function that's far removed from the <tt class="docutils literal">GET</tt>.</li> <li>You are given an entity and forget to run <tt class="docutils literal">entity = entity.key.get()</tt> to &quot;re-GET&quot; inside the transaction</li> <li>There are multiple codepaths used to <tt class="docutils literal">GET</tt> an object, and only some of them -- maybe the ones used 99% of the time, so everything seems mostly-fine -- are done inside the transaction</li> <li>The <tt class="docutils literal">get()</tt> call gives a cached result</li> </ul> <p>This last cause was a big problem for us: we would cache the entity corresponding to the current user, for efficiency. Then, whenever we wanted to update the current user, we'd do <tt class="docutils literal"><span class="pre">get_current_user().modify().put()</span></tt> inside a transaction, without realizing that <tt class="docutils literal">get_current_user()</tt> was returning some cached entity that was fetched way before the transaction started.</p> <p>The solution is pretty straightforward, once you realize there's a problem. The issue is finding out there's a problem in the first place, and then tracing through the code to find the problematic <tt class="docutils literal">GET</tt>.</p> </div> <div class="section" id="a-taxonomy-of-data-stomping-errors"> <h2>A Taxonomy of Data Stomping Errors</h2> <p>While the GET-outside-transaction error is the most common, there are many related types of data corruption. The infrastructure we put in place catches the following three types:</p> <dl class="docutils"> <dt><strong>Stomping</strong></dt> <dd><p class="first">Doing the <tt class="docutils literal">PUT</tt> inside a transaction or user-lock, but not the <tt class="docutils literal">GET</tt>.</p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">seems_ok_but_is_not</span><span class="p">(</span><span class="n">uid</span><span class="p">):</span>
     <span class="n">user_data</span> <span>=</span> <span class="n">UserData</span><span>.</span><span class="n">get_from_id</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>   <span># cached!</span>
     <span class="n">user_data</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="mi">5</span>
     <span class="n">user_data</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> <p class="last">The problem here is that <tt class="docutils literal">get_from_user_id()</tt> gets the user-data entity from a cache. So even though it looks like you're doing the GET from within the transaction, you're actually (potentially) just seeing some object that was gotten much earlier in the request, outside this transaction.</p> </dd> <dt><strong>Totally unprotected stomping</strong></dt> <dd><p class="first">Doing a <tt class="docutils literal">GET - MODIFY - PUT</tt> entirely outside a transaction or user-lock.</p> <pre class="code python last literal-block">
<span class="k">def</span> <span class="nf">badfunc</span><span class="p">(</span><span class="n">user_data</span><span class="p">):</span>
     <span class="n">user_data_again</span> <span>=</span> <span class="n">db</span><span>.</span><span class="n">get</span><span class="p">(</span><span class="n">user_data</span><span>.</span><span class="n">key</span><span class="p">())</span>
     <span class="n">user_data_again</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="mi">5</span>
     <span class="n">user_data_again</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> </dd> <dt><strong>Internal stomping</strong></dt> <dd><p class="first">Doing two nested (or interleaved) <tt class="docutils literal">GET - MODIFY - PUT</tt>'s inside a single transaction/lock.</p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">_internal_fn</span><span class="p">(</span><span class="n">uid</span><span class="p">):</span>
   <span class="n">user_data1</span> <span>=</span> <span class="n">get_user</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
   <span class="n">user_data1</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="mi">5</span>
   <span class="n">user_data1</span><span>.</span><span class="n">put</span><span class="p">()</span>

<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">public_fn</span><span class="p">(</span><span class="n">uid</span><span class="p">):</span>
   <span class="n">user_data2</span> <span>=</span> <span class="n">get_user</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
   <span class="n">user_data2</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="mi">10</span>
   <span class="n">_internal_fn</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
   <span class="n">user_data2</span><span>.</span><span class="n">put</span><span class="p">()</span>
</pre> <p class="last">The problem here is that <tt class="docutils literal">user_data1</tt> and <tt class="docutils literal">user_data2</tt> are totally different python objects. When we do the <tt class="docutils literal">user_data2.put()</tt>, it totally overwrites the change made in <tt class="docutils literal">user_data1</tt>. This is the classical db-stomping problem, but within a single request!</p> </dd> </dl> </div> <div class="section" id="how-to-use-it"> <h2>How To Use It</h2> <p>To get the benefits of transaction-safety checking, you must annotate a db/ndb model with a decorator saying what method you use to guarantee safe <tt class="docutils literal">put()</tt>'s:</p> <ol class="arabic simple"> <li><tt class="docutils literal">&#64;never_written_model()</tt> -- super rare!</li> <li><tt class="docutils literal">&#64;abstract_model()</tt> -- commonly for polymodels and utility classes</li> <li><tt class="docutils literal">&#64;structured_property_model()</tt> -- for (Local)StructuredProperty models</li> <li><tt class="docutils literal">&#64;written_once_model()</tt> -- easiest to use correctly (no need for transactions)</li> <li><tt class="docutils literal">&#64;written_in_transaction_model()</tt> -- you put get-modify-put in a transaction</li> <li><tt class="docutils literal">&#64;written_with_user_lock_model(lockid_fn)</tt> -- you put get-modify-put in a <a class="reference external" href="/posts/user-write-lock.htm">user write lock</a></li> <li><tt class="docutils literal">&#64;written_via_cron_model()</tt> -- appengine lets you schedule cron jobs; if an entity is only accessed via a cron job, we know two requests will never access that entity at the same time</li> <li><tt class="docutils literal">&#64;dangerously_written_outside_transaction_model()</tt> -- for legacy code</li> <li><tt class="docutils literal">&#64;dangerously_written_outside_transaction_model_or_user_lock()</tt> -- ditto</li> </ol> <p>These instruct the transaction-safety system what kinds of violations to look for. There is much more documentation of each choice at the bottom of <a class="reference external" href="/supporting-files/txn_safety.py">txn_safety.py</a>. Note that <tt class="docutils literal">&#64;written_with_user_lock_model</tt> takes an argument: that should a be a function that takes an entity and returns the <tt class="docutils literal">lock_id</tt> for that entity. For instance, if the lock is protecting a single user, the <tt class="docutils literal">lock_id</tt> might be the user-id. This is necessary because a single lock can protect many different entities. Example:</p> <pre class="code python literal-block">
<span class="nd">&#64;db_decorators.written_with_user_lock_model</span><span class="p">(</span><span class="k">lambda</span> <span class="n">e</span><span class="p">:</span> <span class="n">e</span><span>.</span><span class="n">kaid</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">UserVideo</span><span class="p">(</span><span class="n">db</span><span>.</span><span class="n">Model</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A single user's interaction with a single video.&quot;&quot;&quot;</span>
    <span class="n">user</span> <span>=</span> <span class="n">db</span><span>.</span><span class="n">UserProperty</span><span class="p">(</span><span class="n">indexed</span><span>=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">kaid</span> <span>=</span> <span class="n">db</span><span>.</span><span class="n">StringProperty</span><span class="p">(</span><span class="n">indexed</span><span>=</span><span class="bp">True</span><span class="p">)</span>   <span># user's user-id</span>
    <span class="n">video_key</span> <span>=</span> <span class="n">object_property</span><span>.</span><span class="n">KeyProperty</span><span class="p">(</span><span class="n">indexed</span><span>=</span><span class="bp">True</span><span class="p">)</span>
    <span>...</span>
</pre> <p>Second, you have to wrap your WSGI application in the transaction-safety middleware:</p> <pre class="code python literal-block">
<span class="n">app</span> <span>=</span> <span class="n">webapp2</span><span>.</span><span class="n">WSGIApplication</span><span class="p">([</span><span>...</span><span class="n">routes</span><span>...</span><span class="p">])</span>
<span class="n">app</span> <span>=</span> <span class="n">txn_safety</span><span>.</span><span class="n">TransactionSafetyMiddleware</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</pre> <p>Then you just run your application. If there is a transaction-safety violation, the system will log it:</p> <pre class="code literal-block">
Did a put() of the same entity from two different python objects: &lt;class 'user_models.UserData'&gt;.
Other put:
---
File &quot;/api/internal/scratchpads.py&quot;, line 408, in update_user_scratchpad old_points, old_challenge_status, client_dt, time_taken)
File &quot;/api/internal/scratchpads.py&quot;, line 436, in add_actions_for_user_scratchpad finished=(progress == &quot;complete&quot;))
File &quot;/scratchpads/models.py&quot;, line 2775, in record_for_user_and_scratchpad scratchpad=scratchpad)
File &quot;/rewards/triggers.py&quot;, line 119, in update_with_triggers_no_put user_data, possible_badges, dry_run=dry_run, **kwargs)
File &quot;/rewards/util_rewards.py&quot;, line 158, in maybe_award_badges_no_put badge.award_to(user_data=user_data, **kwargs)
File &quot;/badges/cs_badges.py&quot;, line 450, in award_to user_data, self.name, self.description)
File &quot;/notifications/cs_notifications.py&quot;, line 201, in send_certificate_notifications coach.put()
File &quot;/user_models.py&quot;, line 4173, in put result = super(UserData, self).put(*args, **kwargs)
---
Traceback (most recent call last):
File &quot;/api/internal/scratchpads.py&quot;, line 408, in update_user_scratchpad old_points, old_challenge_status, client_dt, time_taken)
File &quot;/api/internal/scratchpads.py&quot;, line 436, in add_actions_for_user_scratchpad finished=(progress == &quot;complete&quot;))
File &quot;/scratchpads/models.py&quot;, line 2777, in record_for_user_and_scratchpad user_data.put()
File &quot;/user_models.py&quot;, line 4173, in put result = super(UserData, self).put(*args, **kwargs)
File &quot;/db_hooks.py&quot;, line 55, in wrapper hook(model_or_models)
File &quot;/db_patching.py&quot;, line 613, in _examine_put_state _examine_tainted_put(entity)
File &quot;/db_patching.py&quot;, line 605, in _examine_tainted_put % (type(entity), tb))
</pre> <p>This is an example of &quot;internal stomping.&quot; If you had access to the source code, these tracebacks would be enough to tell you that <tt class="docutils literal">record_for_user_and_scratchpad</tt> does a <tt class="docutils literal">get()</tt> + <tt class="docutils literal">put()</tt> of some user-data, and <tt class="docutils literal">send_certificate_notifications</tt> does a nested <tt class="docutils literal">get()</tt> + <tt class="docutils literal">put()</tt> of the same user-data.</p> <p>For power users, the source code documents functions like <tt class="docutils literal">disable_user_write_lock_checking_in_test()</tt>.</p> <p>In the <a class="reference external" href="/posts/user-write-lock.htm">last blog post</a> I mentioned that <tt class="docutils literal">lock_util.py</tt>'s <tt class="docutils literal">fetch_under_user_write_lock</tt> could not be used at that time. Well, with the functionality in this blog post, it can be!, making it really easy to re-fetch an entity -- or not, as needed -- under the user write lock.</p> <pre class="code python literal-block">
<span class="k">def</span> <span class="nf">update_points</span><span class="p">(</span><span class="n">user_data</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">fetch_under_user_write_lock</span><span class="p">(</span><span class="n">user_data</span><span class="p">)</span> <span class="k">as</span> <span class="n">ud_again</span><span class="p">:</span>
        <span class="n">ud_again</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="mi">5</span>
</pre> <p>If we are already under the write lock, this is a noop, otherwise it will re-fetch the entity under the lock. It works for both db and ndb entities.</p> </div> <div class="section" id="how-it-works"> <h2>How It Works</h2> <p>The basic approach of the transaction-safety infrastructure is to annotate every datastore entity with a history of when it was retrieved from the datastore and what the state of the world was at the time: in transaction X, or under user lock Y. At <tt class="docutils literal">put()</tt> time, it examines that history to make sure it's in the same transaction or user lock -- or indeed in any transaction at all -- and complains if so, giving a traceback of the <tt class="docutils literal">put()</tt> call to help with debugging. It also keeps track of whether the same entity was <tt class="docutils literal">get()</tt>-ed multiple times, which is needed to detect internal stomping.</p> <p>Here is a snippet from <a class="reference external" href="/supporting-files/txn_safety.py">txn_safety.py</a> to demonstrate how it works:</p> <pre class="code python literal-block">
<span># For a newly created entity, we don't need a transaction.</span>
<span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">entity</span><span class="p">,</span> <span>'_ts_get_nonce'</span><span class="p">):</span>
    <span class="k">return</span>     <span># not created via a get()</span>
<span class="n">get_transaction</span> <span>=</span> <span class="nb">getattr</span><span class="p">(</span>
    <span class="n">entity</span><span class="p">,</span> <span>'_transaction_at_request_time'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">put_transaction</span> <span>=</span> <span class="n">_transaction_object</span><span class="p">()</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">get_transaction</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">put_transaction</span><span class="p">:</span>
    <span class="n">_ts_violation</span><span class="p">(</span><span>'Did not use a transaction'</span><span class="p">)</span>
<span class="k">elif</span> <span class="ow">not</span> <span class="n">get_transaction</span><span class="p">:</span>
    <span class="n">_ts_violation</span><span class="p">(</span><span>'Did the get() outside a transaction'</span><span class="p">)</span>
<span class="k">elif</span> <span class="ow">not</span> <span class="n">put_transaction</span><span class="p">:</span>
    <span class="n">_ts_violation</span><span class="p">(</span><span>'Did the put() outside a transaction'</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">get_transaction</span> <span>!=</span> <span class="n">put_transaction</span><span class="p">:</span>
    <span class="n">_ts_violation</span><span class="p">(</span><span>'Did the get() and put() in different txns'</span><span class="p">)</span>
</pre> <p>The bulk of the complexity is actually in <a class="reference external" href="/supporting-files/db_hooks.py">db_hooks.py</a>: the code for adding get-hooks and put-hooks in App Engine db and ndb models. While there is a <a class="reference external" href="https://cloud.google.com/appengine/docs/python/ndb/modelclass#hooks">built-in hook system for ndb</a>, it is not adequate for our purposes because it only hooks <cite>get()</cite> calls, not queries. And the older db library has no hooks at all. <tt class="docutils literal">db_hooks.py</tt> provides a uniform interface for hooking all functions that get or return entities in both db libraries.</p> </div> <div class="section" id="appendix-non-data-stomping-errors"> <h2>Appendix: Non-Data Stomping Errors</h2> <p>Data stomping is not the only problems you can run into with db data. Here are 4 cases our infrastructure does not detect.</p> <dl class="docutils"> <dt><strong>Stale reads</strong></dt> <dd><p class="first"><tt class="docutils literal">GET</tt> + <tt class="docutils literal">GET - MODIFY - PUT</tt> + <tt class="docutils literal">&lt;use first GET&gt;</tt></p> <pre class="code python literal-block">
<span class="nd">&#64;ndb.transactional</span>
<span class="k">def</span> <span class="nf">goodfunc</span><span class="p">(</span><span class="n">user_data</span><span class="p">):</span>
   <span class="n">user_data_again</span> <span>=</span> <span class="n">user_data</span><span>.</span><span class="n">key</span><span>.</span><span class="n">get</span><span class="p">()</span>
   <span class="n">user_data_again</span><span>.</span><span class="n">points</span> <span>+=</span> <span class="mi">5</span>
   <span class="n">user_data_again</span><span>.</span><span class="n">put</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">oopsfunc</span><span class="p">(</span><span class="n">user_data</span><span class="p">):</span>
   <span class="k">if</span> <span class="n">should_assign_points</span><span class="p">:</span>
       <span class="n">goodfunc</span><span class="p">(</span><span class="n">user_data</span><span class="p">)</span>
   <span class="k">if</span> <span class="n">user_data</span><span>.</span><span class="n">points</span> <span>&gt;</span> <span class="mi">100</span><span class="p">:</span>   <span># stale read!</span>
       <span>...</span>
</pre> <p class="last">The problem here is that <tt class="docutils literal">goodfunc()</tt> updates <tt class="docutils literal">user_data_again</tt>, but leaves <tt class="docutils literal">user_data</tt> untouched. So the <tt class="docutils literal">user_data.points</tt> read will never see the 5 points you just awarded!</p> </dd> <dt><strong>Consistency</strong></dt> <dd><p class="first">Two <tt class="docutils literal">PUT</tt>'s that should be in a transaction together.</p> <p class="last">This (not db data stomping) is the traditional motivation for using transactions. If you are modifying both a coach and student to teach each about the other, that should happen inside a transaction. We do nothing to check that you do.</p> </dd> <dt><strong>Overwrites</strong></dt> <dd><p class="first">Two new-entity <tt class="docutils literal">PUT</tt>'s with the same key at the same time.</p> <p>If request A does <tt class="docutils literal"><span class="pre">MyModel(key='foo',</span> <span class="pre">value=1).put()</span></tt> and request B does <tt class="docutils literal"><span class="pre">MyModel(key='foo',</span> <span class="pre">value=2).put()</span></tt>, only one will win and the other will be thrown away.</p> <p class="last">App Engine provides <tt class="docutils literal">get_or_insert()</tt>, which you can use in lieu of <tt class="docutils literal">put()</tt> in situations where that is a concern. Note that this is only an issue if you explicitly specify a <tt class="docutils literal">key</tt> param. Otherwise, unique keys are assigned automatically, and it's impossible for two new-entity <tt class="docutils literal">put()</tt>'s to conflict.</p> </dd> <dt><strong>Races</strong></dt> <dd><p class="first">You want A's <tt class="docutils literal">GET - MODIFY - PUT</tt> to happen before B's, but B goes before A.</p> <p class="last">API X is a call that gives a user some points. API Y is a call that sees if a user has enough points for a particular badge, and awards it if so. You want to make sure, in your request, that API X is called before API Y. But while our code guarantees those two API's won't update the user-data at the same time, nothing guarantees one request will run first. You have to do that ordering constraint in your own code.</p> </dd> </dl> </div> </div> </div> </article> <div class="keep-reading-buttons"> <div class="keep-reading-cell keep-reading-left"> <div class="button prev-post-button team-infrastructure"> <div class="header">previous post</div> <a href="/posts/user-write-lock.htm" class="post-title">The User Write Lock: an Alternative to Transactions for Google App Engine</a> </div> </div> <div class="keep-reading-cell keep-reading-right"> <div class="button next-post-button team-eng-leads"> <div class="header">next post</div> <a href="/posts/healthy-hackathons.htm" class="post-title">Hackathons Can Be Healthy</a> </div> </div> </div> </main> <script>document.getElementById("mobile-menu-button").onclick=function(){var e=document.body,t=document.getElementById("left-bar"),a=document.getElementById("content");"mobile-visible"===t.className?(e.className="",t.className="",a.className=""):(e.className="mobile-menu-visible",t.className="mobile-visible",a.className="mobile-hidden")};var totallyActivated=!1;document.getElementById("activate-tota11y").onclick=function(){if(totallyActivated)console.log("Tota11y already activated. Doing nothing.");else{var e=document.createElement("script");e.src="/javascript/tota11y.min.js",document.head.appendChild(e),totallyActivated=!0}},function(e,t,a,n,c,l,o){e.GoogleAnalyticsObject=c,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,l=t.createElement(a),o=t.getElementsByTagName(a)[0],l.async=1,l.src="//www.google-analytics.com/analytics.js",o.parentNode.insertBefore(l,o)}(window,document,"script",0,"ga"),ga("create","UA-65856931-1","auto"),ga("send","pageview");</script> </body> </html> 