<!DOCTYPE html> <html> <head> <title>i18nize-templates: Internationalization After the Fact | Khan Academy Engineering</title> <link rel="icon" href="/images/favicon.ico"> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta name="description" content="We're the engineers behind Khan Academy. We're building a free, world-class education for anyone, anywhere.">  <style>#left-bar .logo,body{font-family:Lato,'Helvetica Neue',Arial,sans-serif;src:url(https://fonts.googleapis.com/css?family=Lato)}#left-bar,#left-bar .logo a{color:#FFF}#left-bar .bio a,#left-bar .logo a{text-decoration:none}#left-bar .logo,#left-bar .subscription-info{text-align:left}body,html{height:100%;margin:0}body{background-color:#F7F8FA;font-size:14px;width:920px}@media (min-width:920px){body{font-size:16px}}@media (max-width:920px){body{width:100%}body.mobile-menu-visible{background-color:#0A2A66}}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.inline-author-photo{height:1.6em;width:1.6em;border-radius:.8em;vertical-align:middle;margin-right:4px}.font-awesome-svg{width:1em;height:1em;display:inline-block}#left-bar{box-sizing:border-box;display:table-cell;background-color:#0A2A66;min-width:325px;padding:10px 35px 35px}@media (max-width:920px){#left-bar{display:block;width:100%;padding:0 20px}#left-bar.mobile-visible{padding-bottom:60px}#left-bar:not(.mobile-visible) section{display:none}}#left-bar .logo{font-size:28px;letter-spacing:1px;line-height:1em;margin-bottom:6px;margin-left:-2px;margin-top:0;text-transform:uppercase}#left-bar .logo.mobile{font-size:24px;display:none}@media (max-width:920px){#left-bar .logo.mobile{display:block}#left-bar .logo.mobile a{padding:11px 20px 15px;margin:0 -20px -15px;display:block;text-decoration:none;color:#FFF}#left-bar .logo.mobile svg{opacity:.8;margin-right:-2px;margin-top:1px;height:25px}#left-bar .logo.mobile .text,#left-bar .logo.mobile svg{vertical-align:middle}#left-bar .logo{display:none}}#left-bar .logo .engineering{color:#00E5AE}#left-bar .bio{font-size:12px;line-height:1.4;margin-top:10px}#left-bar .bio,#left-bar .bio *{color:#FFF}#left-bar .bio a:hover{text-decoration:underline}#left-bar .subscription-info .links{font-size:24px}#left-bar .subscription-info .links a{margin-right:7px;text-decoration:none;color:#FFF}#left-bar .subscription-info .links a:hover{border-bottom:1px solid #FFF}#left-bar .subscription-info .links .email{margin-top:-1px}#left-bar .section-heading{color:#F7F8FA;font-size:12px;font-weight:300;letter-spacing:.5px;margin-top:40px;text-transform:lowercase}#left-bar .post-blurb{margin-top:30px;padding-bottom:4px;border-left:1px solid transparent;padding-left:10px;margin-left:-10px;font-size:14px}@media (max-width:920px){#left-bar .post-blurb{border-left:10px solid transparent;padding-left:17px;margin-left:-26px}}#left-bar .post-blurb:first-of-type{margin-top:20px}#left-bar .post-blurb.team-infrastructure{border-color:#E57281}#left-bar .post-blurb.team-web-frontend{border-color:#63BBD9}#left-bar .post-blurb.team-mobile{border-color:#63BB81}#left-bar .post-blurb.team-eng-leads{border-color:#ccc}#left-bar .post-blurb.team-design{border-color:#ab59c6}#left-bar .post-blurb.team-wtf{border-color:#ff00af}#left-bar .post-blurb.team-content-platform{border-color:#ffbf00}#left-bar .post-blurb .title{font-weight:400;margin:0 0 9px}#left-bar .post-blurb .title a{color:#FFF;text-decoration:none}#left-bar .post-blurb .title a:hover{text-decoration:underline}#left-bar .post-blurb .info{font-size:12px}#left-bar .post-blurb .info .author-link{color:#FFF;text-decoration:none;font-weight:700;font-size:11px}#left-bar .post-blurb .info .author-link:hover{text-decoration:underline}#left-bar .meta-section .link-list{margin:0 0 0 4px;padding:0;list-style-type:square}#left-bar .meta-section .link-list li{margin-bottom:10px}#left-bar .meta-section .link-list li a{margin-left:-4px}#left-bar .meta-section .link-list a{color:#FFF;text-decoration:none}#left-bar .meta-section .link-list a:hover{text-decoration:underline}#content{display:table-cell;padding:10px 35px 35px 50px;color:#21242C}@media (max-width:920px){#left-bar .meta-section .link-list{list-style-type:none}#content{padding:10px 20px 50px;display:block}#content.mobile-hidden{display:none}}#content .title a{letter-spacing:1px;margin-bottom:8px;font-size:1.265625em;line-height:1;color:#21242C;text-decoration:none}@media (min-width:920px){#content .title a{font-size:1.5625em}}#content .title a:focus,#content .title a:hover{text-decoration:underline}#content .info .author-link{color:#21242C;font-weight:700;text-decoration:none}#content .info .author-link:hover{text-decoration:underline}#content .info .team-tag{border-radius:.3em;padding:.3em .8em;font-size:.7em;font-weight:500;display:inline-block;color:#fff;margin-left:4px;margin-right:4px}#content .info .team-tag.web-frontend{background-color:#63BBD9}#content .body{margin-top:30px;line-height:1.5;width:580px}@media (max-width:920px){#content .body{width:100%}}#content .body a{color:#1865f2;text-decoration:none}#content .body a:hover{text-decoration:underline}#content .body img{max-width:100%}#content .keep-reading-buttons{display:table;margin-top:30px;width:100%}#content .keep-reading-buttons .keep-reading-cell{display:table-cell;margin:0;padding:0;vertical-align:top;width:50%}progress,sub,sup{vertical-align:baseline}#content .keep-reading-buttons .keep-reading-right{text-align:right}#content .keep-reading-buttons .button{padding:3px 0;display:inline-block;max-width:90%;color:#21242C}.align-center,details{display:block}#content .keep-reading-buttons .button .header{font-size:12px;color:rgba(33,36,44,.64)}#content .keep-reading-buttons .button .post-title{margin-top:8px;color:#1865f2;text-decoration:none;display:block}#content .keep-reading-buttons .button .post-title:hover,abbr[title]{text-decoration:underline}#content .keep-reading-buttons .button.next-post-button{border-right:2px solid;padding-right:10px;margin-right:-10px}#content .keep-reading-buttons .button.prev-post-button{border-left:2px solid;padding-left:10px;margin-left:-10px}#content .keep-reading-buttons .button.team-infrastructure{border-color:#E57281}#content .keep-reading-buttons .button.team-web-frontend{border-color:#63BBD9}#content .keep-reading-buttons .button.team-mobile{border-color:#63BB81}#content .keep-reading-buttons .button.team-eng-leads{border-color:#ccc}#content .keep-reading-buttons .button.team-design{border-color:#ab59c6}#content .keep-reading-buttons .button.team-wtf{border-color:#ff00af}#content .keep-reading-buttons .button.team-content-platform{border-color:#ffbf00}#content .footnote-text{font-size:12px;line-height:normal}.code,.codehilite{background-color:#EEE;border-radius:6px;border:1px solid #CCC;overflow-x:auto;padding:6px;margin:14px 0}.code .ln,.codehilite .ln{color:#AAA}.label{margin-top:1.5em}.caption{text-align:center;font-style:italic}caption,table.data-table th{text-align:left}.align-center{margin-left:auto;margin-right:auto}.literal,code{word-wrap:break-word}caption,figcaption{font-style:italic}caption{caption-side:bottom}table.data-table{margin:0 auto}table.data-table td{text-align:right}table.data-table td,table.data-table th{padding:0 5px;white-space:nowrap}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}.x-scrollable{overflow-x:auto}button,hr,input{overflow:visible}.pullquote{text-align:center;margin-left:58px;margin-right:58px;font-size:24px;font-style:italic;color:#777}/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}textarea{overflow:auto}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.c,.c1,.cm,.cs,.ge{font-style:italic}.cp,.cs,.gs,.k,.kc,.kd,.kn,.kp,.kr,.kt,.nc,.ne,.nf,.o,.ow{font-weight:700}summary{display:list-item}[hidden],template{display:none}.hll{background-color:#ffc}.c{color:#998}.err{color:#a61717;background-color:#e3d2d2}.cm{color:#998}.cp{color:#999}.c1{color:#998}.cs{color:#999}.gd{color:#000;background-color:#fdd}.gr{color:#a00}.gh{color:#999}.gi{color:#000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gu{color:#aaa}.gt{color:#a00}.kt{color:#458}.m{color:#099}.s{color:#b84}.na{color:teal}.nb{color:#999}.nc{color:#458}.no{color:teal}.ni{color:purple}.ne,.nf{color:#900}.nn{color:#555}.nt{color:navy}.nv{color:teal}.w{color:#bbb}.mf,.mh,.mi,.mo{color:#099}.s2,.sb,.sc,.sd,.se,.sh,.si,.sx{color:#b84}.sr{color:olive}.s1,.ss{color:#b84}.bp{color:#999}.vc,.vg,.vi{color:teal}.il{color:#099}</style>  </head> <body> <div id="left-bar"> <h1 class="logo"> <a href="/"><span aria-label="Khan Academy">Khan</span> <span class="engineering">Engineering</span></a> </h1> <h1 class="logo mobile">  <a id="mobile-menu-button" href="javascript: void 0"> <svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1664 1344v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45z" fill="#fff"/></svg> <span class="text"><span aria-label="Khan Academy">Khan</span> <span class="engineering">Engineering</span></span> </a> </h1> <section class="bio"> We're the engineers behind <a href="https://www.khanacademy.org">Khan Academy</a>. We're building a free, world-class education for anyone, anywhere. </section> <section class="subscription-info"> <h2 class="section-heading">Subscribe</h2> <div class="links"> <a href="https://twitter.com/KhanAcademyEng"><span class="sr-only">Subscribe with Twitter</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z" fill="#fff"/></svg></a> <a href="/rss.xml"><span class="sr-only">Subscribe with RSS</span><svg class="font-awesome-svg" viewbox="0 0 1792 1792" aria-hidden="true"><path d="M576 1344q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm512 123q2 28-17 48-18 21-47 21h-135q-25 0-43-16.5t-20-41.5q-22-229-184.5-391.5t-391.5-184.5q-25-2-41.5-20t-16.5-43v-135q0-29 21-47 17-17 43-17h5q160 13 306 80.5t259 181.5q114 113 181.5 259t80.5 306zm512 2q2 27-18 47-18 20-46 20h-143q-26 0-44.5-17.5t-19.5-42.5q-12-215-101-408.5t-231.5-336-336-231.5-408.5-102q-25-1-42.5-19.5t-17.5-43.5v-143q0-28 20-46 18-18 44-18h3q262 13 501.5 120t425.5 294q187 186 294 425.5t120 501.5z" fill="#fff"/></svg></a> </div> </section> <section> <h2 class="section-heading">Latest posts</h2> <div class="post-blurb team-engineering"> <h3 class="title"> <a href="/posts/eng-principles-help-scale.htm">How Engineering Principles Can Help You Scale</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/marta.jpg" aria-hidden="true" role="presentation"> <a class="author-link">Marta Kosarchyn</a> on August 21<sup aria-hidden="true">st</sup> </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/windows-high-contrast-mode.htm">Making Websites Work with Windows High Contrast Mode</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/diedra.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/dierat">Diedra Rater</a> on March 21<sup aria-hidden="true">st</sup> </div> </div> <div class="post-blurb team-content-platform"> <h3 class="title"> <a href="/posts/kotlin-for-python-developers.htm">Kotlin for Python developers</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/aasmundeldhuset.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://eldhuset.net/">Aasmund Eldhuset</a> on Nov 29, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/using-static-analysis-in-Python-and-JavaScript-to-make-your-system-safer.htm">Using static analysis in Python, JavaScript and more to make your system safer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on Jul 26, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/kotlin-adoption.htm">Kotlin on the server at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/colin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/cjfuller">Colin Fuller</a> on Jun 28, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/original-serverless.htm">The Original Serverless Architecture is Still Here</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on May 31, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/architects-at-khan.htm">What do software architects at Khan Academy do?</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on May 14, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/khanalytics.htm">New data pipeline management platform at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ragini.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/guptaragini">Ragini Gupta</a> on Apr 30, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-3.htm">Untangling our Python Code</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/carter.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://carterjbastian.com/">Carter J. Bastian</a> on Apr 16, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/slicker.htm">Slicker: A Tool for Moving Things in Python</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on Apr 2, 2018 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/python-refactor-1.htm">The Great Python Refactor of 2017 And Also 2018</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Mar 19, 2018 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/working-remotely.htm">Working Remotely</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/scottgrant.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/scotchfield">Scott Grant</a> on Oct 2, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/tips-for-code-reviews.htm">Tips for giving your first code reviews</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/hannah.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://hannahblumberg.com/">Hannah Blumberg</a> on Sep 18, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/lets-reduce.htm">Let&#x27;s Reduce! A Gentle Introduction to Javascript&#x27;s Reduce Method</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/joshcomeau.jpeg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/joshwcomeau">Josh Comeau</a> on Jul 10, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/creating-query-components-with-apollo.htm">Creating Query Components with Apollo</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Jun 12, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/react-native-monorepo.htm">Migrating to a Mobile Monorepo for React Native</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jared.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jaredforsyth.com/">Jared Forsyth</a> on May 29, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-fms.htm">Memcached-Backed Content Infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 15, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/memcached-profiling.htm">Profiling App Engine Memcached</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/ben-kraft.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.benkraft.org/">Ben Kraft</a> on May 1, 2017 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/flex-language-shootout.htm">App Engine Flex Language Shootout</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/amos-latteier.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/latteier">Amos Latteier</a> on Apr 17, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-oss-activity.htm">What&#x27;s New in OSS at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/brian-genisio.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/BrianGenisio">Brian Genisio</a> on Apr 3, 2017 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/automating-app-store-screenshots.htm">Automating App Store Screenshots</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on Mar 27, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/its-okay-to-break-things.htm">It&#x27;s Okay to Break Things: Reflections on Khan Academy&#x27;s Healthy Hackathon</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kimeriegreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/Kimerie">Kimerie Green</a> on Mar 6, 2017 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/interning-at-khan-academy.htm">Interning at Khan Academy: from student to intern</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/shadajladdad.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://shadaj.me">Shadaj Laddad</a> on Dec 12, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/prototyping-with-framer.htm">Prototyping with Framer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/nickbreen.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/MrNickBreen">Nick Breen</a> on Oct 3, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/evolving-our-content-infrastructure.htm">Evolving our content infrastructure</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 19, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/a-really-small-app.htm">Building a Really, Really Small Android App</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/charliemarsh.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.crmarsh.com">Charlie Marsh</a> on Aug 22, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/a-case-for-time-tracking.htm">A Case for Time Tracking: Data Driven Time-Management</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/olivernorthwood.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/allofthenorthwood">Oliver Northwood</a> on Aug 8, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/time-management-multiple-authors.htm">Time Management at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers">Several Authors</a> on Jul 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/healthy-hackathons.htm">Hackathons Can Be Healthy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/tomyedwab.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.arguingwithalgorithms.com">Tom Yedwab</a> on Jul 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/transaction-safety.htm">Ensuring transaction-safety in Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 27, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/user-write-lock.htm">The User Write Lock: an Alternative to Transactions for Google App Engine</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Jun 20, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/engineering-principles.htm">Khan Academy&#x27;s Engineering Principles</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkamens.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bjk5.com">Ben Kamens</a> on Jun 6, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/shortest-regex.htm">Minimizing the length of regular expressions, in practice</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on May 23, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/introducing-swifttweaks.htm">Introducing SwiftTweaks</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/bryanclark.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.bryanjclark.com/">Bryan Clark</a> on May 9, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/autonomous-dumbledore.htm">The Autonomous Dumbledore</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/evykassirer.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://www.evykassirer.com/">Evy Kassirer</a> on Apr 25, 2016 </div> </div> <div class="post-blurb team-eng-leads"> <h3 class="title"> <a href="/posts/career-development.htm">Engineering career development at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/beneater.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/beneater">Ben Eater</a> on Apr 11, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/aphrodite-inline-css.htm">Inline CSS at Khan Academy: Aphrodite</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jamiewong.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://jamie-wong.com">Jamie Wong</a> on Mar 29, 2016 </div> </div> <div class="post-blurb team-mobile"> <h3 class="title"> <a href="/posts/starting-android.htm">Starting Android at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benkomalo.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/benkomalo">Ben Komalo</a> on Feb 29, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/translation_assistant.htm">Automating Highly Similar Translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Feb 15, 2016 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/snippet-server.htm">The weekly snippet-server: open-sourced</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Feb 1, 2016 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/stories-from-interns.htm">Stories from our latest intern class</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/khanacademy.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://www.khanacademy.org/careers/interns">2015 Interns</a> on Dec 21, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/kanbanning-learnstorm-dev-process.htm">Kanbanning the LearnStorm Dev Process</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevindangoor.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://blueskyonmars.com/">Kevin Dangoor</a> on Dec 7, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/js-packaging-http2.htm">Forgo JS packaging? Not so fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Nov 23, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/switching-to-slack.htm">Switching to Slack</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/benjaminpollack.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://bitquabit.com/">Benjamin Pollack</a> on Nov 9, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/receiving-feedback.htm">Receiving feedback as an intern at Khan Academy</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/davidwang.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://ourracingthoughts.com/author/d15w/">David Wang</a> on Oct 26, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/translation-server.htm">Schrödinger&#x27;s deploys no more: how we update translations</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/chelseavoss.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://csvoss.github.io/">Chelsea Voss</a> on Oct 12, 2015 </div> </div> <div class="post-blurb team-infrastructure"> <h3 class="title"> <a href="/posts/i18nize-templates.htm">i18nize-templates: Internationalization After the Fact</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Sep 28, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/making-thumbnails-fast.htm">Making thumbnails fast</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/wchargin.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://wchargin.github.io">William Chargin</a> on Sep 14, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/copy-pasting-more-than-just-text.htm">Copy-pasting more than just text</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/samlau.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/SamLau95">Sam Lau</a> on Aug 31, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/no-cheating-allowed.htm">No cheating allowed!!</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/philliplemons.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://philliplemons.com/">Phillip Lemons</a> on Aug 17, 2015 </div> </div> <div class="post-blurb team-design"> <h3 class="title"> <a href="/posts/fun-with-slopfields.htm">Fun with slope fields, css and react</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/marcosojeda.jpg" aria-hidden="true" role="presentation"> <a class="author-link" href="http://generic.cx/">Marcos Ojeda</a> on Aug 5, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/new-employees-primer.htm">Khan Academy: a new employee&#x27;s primer</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/rileyshaw.png" aria-hidden="true" role="presentation"> <a class="author-link" href="http://rileyjshaw.com">Riley Shaw</a> on Jul 20, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/evil-puzzle.htm">How wooden puzzles can destroy dev teams</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/johnsullivan.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/brownhead">John Sullivan</a> on Jul 6, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/i18n-babel-plugin.htm">Babel in Khan Academy&#x27;s i18n Toolchain</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/kevinbarabash.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/kevinb7">Kevin Barabash</a> on Jun 22, 2015 </div> </div> <div class="post-blurb team-web-frontend"> <h3 class="title"> <a href="/posts/tota11y.htm">tota11y - an accessibility visualization toolkit</a> </h3> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/jordanscales.png" aria-hidden="true" role="presentation"> <a class="author-link" href="https://github.com/jdan">Jordan Scales</a> on Jun 8, 2015 </div> </div> </section> <section class="meta-section"> <h2 class="section-heading">Meta</h2> <ul class="link-list"> <li><a href="https://github.com/Khan/engblog">About this blog</a></li> <li><a href="https://www.khanacademy.org/about">KA's mission</a></li> <li><a href="https://github.com/khan/engblog/issues">Report a bug</a></li> <li><a id="activate-tota11y" href="javascript: void 0">Activate tota11y</a></li> </ul> </section> </div> <main id="content"> <article class="post"> <h1 class="title"> <a href="/posts/i18nize-templates.htm"> i18nize-templates: Internationalization After the Fact </a> </h1> <div class="info"> <img class="inline-author-photo" src="/images/author-icons/csilvers.png" aria-hidden="true" role="presentation"> <span class="sr-only">by</span> <a class="author-link" href="https://github.com/csilvers">Craig Silverstein</a> on Sep 28, 2015 </div> <div class="body"> <div class="document"> <p>Khan Academy started as a collection of videos, but now has over 100,000 pieces of written content, from <a class="reference external" href="https://www.khanacademy.org/math/differential-calculus/derivative_applications/differentiation-application/e/applications-of-differentiation-in-biology--economics--physics--etc">exercises</a> to <a class="reference external" href="https://www.khanacademy.org/humanities/art-history-basics/beginners-art-history/a/cave-painting-contemporary-art-and-everything-in-between">articles</a> to <a class="reference external" href="https://www.khanacademy.org/computing/computer-programming/html-css/intro-to-html/p/challenge-write-a-poem">programming challenges</a>. <a class="reference external" href="https://tr.khanacademy.org/math/differential-calculus/derivative_applications/differentiation-application/e/applications-of-differentiation-in-biology--economics--physics--etc">All</a> <a class="reference external" href="https://es.khanacademy.org/humanities/art-history-basics/beginners-art-history/a/cave-painting-contemporary-art-and-everything-in-between">of</a> <a class="reference external" href="https://pl.khanacademy.org/computing/computer-programming/html-css/intro-to-html/p/challenge-write-a-poem">these</a> are now available in multiple languages. But the Khan Academy codebase was originally written to be English-only. We had to retrofit the codebase to support internationalization (i18n) and localization (l10n) of written content <em>after</em> a lot of infrastructure was already in place. As most guides to i18n and l10n will tell you, life is much happier if you design for them before the fact. This was not an option for us.</p> <p>The task was made more difficult by the variety of technologies we've used over the years. We use 5 different HTML-rendering technologies:</p> <ol class="arabic simple"> <li>jinja2 (for our Python server code)</li> <li>react (for our modern JavaScript code)</li> <li>raw JavaScript (for older JavaScript code)</li> <li>handlebars (for HTML that has to be rendered via both Python and JavaScript)</li> <li>Python (for our very old Python server code, which just wrote HTML directly from source)</li> </ol> <p>and all of them needed to be converted to add i18n markup.</p> <div class="section" id="i18nize-templates"> <h2>i18nize-templates</h2> <p>There are plenty of tools out there to handle the actual translation of strings; we use <a class="reference external" href="http://babel.pocoo.org/">Babel</a> and <a class="reference external" href="https://slexaxton.github.io/Jed/">Jed</a>.</p> <p>And there are plenty of services out there to manage the actual translation of strings; we use <a class="reference external" href="http://www.crowdin.net">Crowdin</a>.</p> <p>What is lacking is a tool that will mark up all the natural language text in your code and templates; this is the process that determines <em>what</em> text to show to translators. For this task, we developed <a class="reference external" href="https://github.com/khan/i18nize_templates">i18nize-templates</a>, a tool for finding natural language text in a variety of templating languages, and automatically munging it to be i18n-aware.</p> <p class="label"><strong>sample input (jinja2)</strong>:</p> <pre class="code html literal-block">
<span class="nt">&lt;h2&gt;</span>Badges<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;p&gt;&lt;img</span> <span class="na">src=</span><span>&quot;{{ badge.icon }}&quot;</span>
        <span class="na">alt=</span><span>&quot;a picture of a {{ badge.label() }}&quot;</span><span class="nt">&gt;</span>
</pre> <p class="label"><strong>sample output</strong>:</p> <pre class="code html literal-block">
<span class="nt">&lt;h2&gt;</span>{{ _(&quot;Badges&quot;) }}<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;p&gt;&lt;img</span> <span class="na">src=</span><span>&quot;{{ badge.icon }}&quot;</span>
        <span class="na">alt=</span><span>&quot;{{ _(&quot;</span><span class="na">a</span> <span class="na">picture</span> <span class="na">of</span> <span class="na">a</span> <span class="err">%(</span><span class="na">badge_label</span><span class="err">)</span><span class="na">s</span><span class="err">&quot;,</span>
                  <span class="na">badge_label=</span><span>badge.label())</span> <span class="err">}}&quot;</span><span class="nt">&gt;</span>
</pre> <p class="label"><strong>sample input (handlebars)</strong>:</p> <pre class="code html literal-block">
<span class="nt">&lt;b</span> <span class="na">class=</span><span>&quot;from-video-author&quot;</span><span class="nt">&gt;</span>From the author:<span class="nt">&lt;/b&gt;</span>
<span class="nt">&lt;textarea</span> <span class="na">placeholder=</span><span>&quot;Post feedback...&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
{{{ discussionFormControls &quot;Post feedback&quot; }}}
</pre> <p class="label"><strong>sample output</strong>:</p> <pre class="code html literal-block">
<span class="nt">&lt;b</span> <span class="na">class=</span><span>&quot;from-video-author&quot;</span><span class="nt">&gt;</span>{{#_}}From the author:{{/_}}<span class="nt">&lt;/b&gt;</span>
<span class="nt">&lt;textarea</span> <span class="na">placeholder=</span><span>&quot;{{#_}}Post feedback...{{/_}}&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
{{#_}}{{{ discussionFormControls &quot;Post feedback&quot; }}}{{/_}}
</pre> <p>i18nize-templates isn't magic: it can't convert <tt class="docutils literal"><span class="pre">item{#if</span> n != <span class="pre">1#}s{#endif}</span></tt> to the proper ngettext call. But it can reduce the time needed to annotate templates by over 90%.</p> <p>i18nize-templates can convert raw HTML, jinja2 templates, and handlebars templates. (Due to similarities between jinja2 and django, it may also support django templates, though this is untested.) It can also convert text files written using jinja2 or handlebars.</p> </div> <div class="section" id="using-i18nize-templates"> <h2>Using i18nize-templates</h2> <p>We are pleased to announce i18nize-templates as an open source Python module. You can install i18nize-templates via</p> <pre class="code sh literal-block">
<span class="nv">$ </span>pip install i18nize-templates
</pre> <div class="section" id="rewriting-templates"> <h3>Rewriting templates</h3> <pre class="code sh literal-block">
<span class="nv">$ </span>pip install i18nize-templates

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Hello {{world}}!&quot;</span> <span class="p">|</span> i18nize-templates
i18nizing -
<span>{{</span> _<span>(</span><span class="s2">&quot;Hello %(world)s!&quot;</span>, <span class="nv">world</span><span>=</span>world<span>)</span> <span>}}</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Hello {{world}}!&quot;</span> <span class="p">|</span> i18nize-templates --handlebars
i18nizing -
<span>{{</span><span>#_}}Hello {{world}}!{{/_}}</span>
</pre> </div> <div class="section" id="extracting-natural-language-text"> <h3>Extracting natural language text</h3> <p>You can also just use i18nize-templates as a Python library to easily extract runs of natural language text from HTML and templated-HTML (or templated-text) documents. Here's a Python snippet we use to fake-translate our website into our testing language, called box-language (<a class="reference external" href="http://boxes.khanacademy.org">http://boxes.khanacademy.org</a>):</p> <pre class="code python literal-block">
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">i18nize_templates</span>

<span class="k">def</span> <span class="nf">translate_to_boxes</span><span class="p">(</span><span class="n">jinja2_file_contents</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">parser_callback</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">segment_separates_nltext</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">s</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span>''</span>               <span># called at end-of-parse</span>
        <span class="k">elif</span> <span class="p">(</span><span class="n">segment_separates_nltext</span>
              <span class="ow">or</span> <span class="p">(</span><span class="n">s</span><span>.</span><span class="n">startswith</span><span class="p">(</span><span>'{{'</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span>.</span><span class="n">endswith</span><span class="p">(</span><span>'}}'</span><span class="p">))</span>
              <span class="ow">or</span> <span class="p">(</span><span class="n">s</span><span>.</span><span class="n">startswith</span><span class="p">(</span><span>'&lt;'</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span>.</span><span class="n">endswith</span><span class="p">(</span><span>'&gt;'</span><span class="p">))):</span>
            <span class="k">return</span> <span class="n">s</span>   <span># do not translate</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">re</span><span>.</span><span class="n">sub</span><span class="p">(</span><span>r'\w'</span><span class="p">,</span> <span>u'</span><span class="se">\u25a1</span><span>'</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>  <span># alnum -&gt; box</span>

    <span class="n">parser</span> <span>=</span> <span class="n">i18nize_templates</span><span>.</span><span class="n">Jinja2HtmlLexer</span><span class="p">(</span><span class="n">parser_callback</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">parser</span><span>.</span><span class="n">parse</span><span class="p">(</span><span class="n">jinaj2_file_contents</span><span class="p">)</span>
</pre> </div> <div class="section" id="extracting-javascript"> <h3>Extracting JavaScript</h3> <p>Sometimes, i18nize-templates is useful just because it knows how to parse templated HTML. For instance, for some of our code, we need to extract JavaScript (inside <tt class="docutils literal">&lt;script&gt;</tt> tags) from our HTML files. There are many tools to do this for straight HTML, but they all choke on templated HTML. A simple callback makes it easy to use i18nize-templates for this task:</p> <pre class="code python literal-block">
<span class="k">def</span> <span class="nf">extract_js_from_html</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="n">filetype</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return JavaScript code from inside an html file.&quot;&quot;&quot;</span>
    <span class="n">next_segment_is_script_contents</span> <span>=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span>
    <span class="n">all_script_contents</span> <span>=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">segment</span><span class="p">,</span> <span class="n">segment_separates_nltext</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">segment</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>    <span># EOF</span>
            <span class="k">return</span> <span>''</span>

        <span># The '&lt;/script' is to check for an empty script.</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">next_segment_is_script_contents</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">and</span>
               <span class="ow">not</span> <span class="n">segment</span><span>.</span><span class="n">lower</span><span class="p">()</span><span>.</span><span class="n">startswith</span><span class="p">(</span><span>'&lt;/script'</span><span class="p">)):</span>
            <span class="n">all_script_contents</span><span>.</span><span class="n">append</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>

        <span class="n">segment</span> <span>=</span> <span class="n">segment</span><span>.</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">next_segment_is_script_contents</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span>=</span> <span class="p">(</span>
            <span class="n">segment</span><span>.</span><span class="n">startswith</span><span class="p">(</span><span>'&lt;script'</span><span class="p">))</span>

    <span class="k">if</span> <span class="n">filetype</span> <span>==</span> <span>&quot;html&quot;</span><span class="p">:</span>
        <span class="n">lexer</span> <span>=</span> <span class="n">i18nize_templates</span><span>.</span><span class="n">HtmlLexer</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">filetype</span> <span>==</span> <span>&quot;jinja2&quot;</span><span class="p">:</span>
        <span class="n">lexer</span> <span>=</span> <span class="n">i18nize_templates</span><span>.</span><span class="n">Jinja2HtmlLexer</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">filetype</span> <span>==</span> <span>&quot;handlebars&quot;</span><span class="p">:</span>
        <span class="n">lexer</span> <span>=</span> <span class="n">i18nize_templates</span><span>.</span><span class="n">HandlebarsHtmlLexer</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">assert</span> <span class="bp">False</span><span class="p">,</span> <span class="p">(</span><span>'Expected &quot;html&quot;, &quot;jinja2&quot; or '</span>
                       <span>'&quot;handlebars&quot;, found </span><span class="si">%s</span><span>'</span> <span>%</span> <span class="n">filetype</span><span class="p">)</span>

    <span class="n">lexer</span><span>.</span><span class="n">parse</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">all_script_contents</span>
</pre> <p>Side note: in reality, our JavaScript extractor is a fair bit more complicated, because of the potential use of the template conditionals within the JavaScript:</p> <pre class="code html literal-block">
<span class="nt">&lt;script&gt;</span>
   <span class="kd">var</span> <span class="nx">x</span> <span>=</span> <span class="p">{</span><span>%</span> <span class="k">if</span> <span class="nx">x</span> <span>%</span><span class="p">}</span><span class="kc">true</span><span class="p">{</span><span>%</span> <span class="k">else</span> <span>%</span><span class="p">}</span><span class="kc">false</span><span class="p">{</span><span>%</span> <span class="nx">endif</span> <span>%</span><span class="p">};</span>
   <span class="nx">call_function</span><span class="p">(</span><span class="nx">x</span><span class="p">{</span><span>%</span> <span class="k">if</span> <span class="nx">arg2</span> <span>%</span><span class="p">},</span> <span class="p">{{</span><span class="nx">arg2</span><span class="p">}}{</span><span>%</span> <span class="nx">endif</span> <span>%</span><span class="p">})</span>
<span class="nt">&lt;/script&gt;</span>
</pre> <p>Our code actually parses out all these conditionals and yields several versions of the JavaScript, one for each possible value of each if/else:</p> <pre class="code javascript literal-block">
<span class="kd">var</span> <span class="nx">x</span> <span>=</span> <span class="kc">true</span><span class="p">;</span> <span class="nx">call_function</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">x</span> <span>=</span> <span class="kc">false</span><span class="p">;</span> <span class="nx">call_function</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">x</span> <span>=</span> <span class="kc">true</span><span class="p">;</span> <span class="nx">call_function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">x</span> <span>=</span> <span class="kc">false</span><span class="p">;</span> <span class="nx">call_function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">);</span>
</pre> <p>The full code of the JavaScript extractor is available <a class="reference external" href="/supporting-files/js_in_html.py">here</a>.</p> </div> </div> <div class="section" id="implementation"> <h2>Implementation</h2> <p>i18nize-templates consists of two parts: a template lexer, and a text rewriter. The template lexer finds runs of natural language text in the input code, and the rewriter adds <tt class="docutils literal">{{ <span class="pre">_(...)</span> }}</tt> and the like, munging the natural language text if appropriate.</p> <div class="section" id="the-lexers"> <h3>The lexers</h3> <p>There are many Python HTML lexers, but none that can handle template markup. For instance, any HTML lexer would get very confused by either of these:</p> <pre class="code literal-block">
&lt;img title=&quot;{{get_title &quot;foo&quot; &quot;bar&quot;}}&quot; src=&quot;...&quot;&gt;
&lt;img title={% if x %}&quot;yes&quot;{% else %}&quot;no&quot;{% endif %} src=&quot;...&quot;&gt;
</pre> <p>(Each template language has its own parser, of course, but these parsers are not suitable for text rewriting of the type we are attempting here, since they parse into an AST but do not provide a way to get from the AST back to a textual representation.)</p> <p>For this reason, i18nize-templates implements its own lexers, one that can handle raw HTML, one that can handle jinja2-annotated HTML, and one that can handle that handlebars-annotated HTML. They are all based on the Python standard library module <tt class="docutils literal">markupbase</tt>, which is what the standard libarary class <tt class="docutils literal">HTMLParser</tt> is based on.</p> <p>We did not base the lexer on HTMLParser directly, since it was too difficult to subclass for the template-specific lexers. This also allowed for some simplifications: we don't parse out HTML entities, for instance.</p> <p>The lexers call a user-provided callback function for every 'element' that they see. There are only a few different types of elements:</p> <ul class="simple"> <li>An HTML tag</li> <li>A run of text between HTML tags</li> <li>A template variable (<tt class="docutils literal">{{variable}}</tt> in jinja2)</li> <li>A template comment (<tt class="docutils literal">{#comment#}</tt> in jinja2)</li> <li>A template block construct (<tt class="docutils literal">{%block <span class="pre">construct%}...{%endblock%}</span></tt> in jinja2)</li> </ul> <p>The main role of the lexer, besides tokenizing the input into elements, is to categorize each element as either <strong>separating natural language text</strong> or <strong>not separating natural language text</strong>.</p> <p>This concept is closely related to the HTML distinction between block and inline elements. If you have (somewhat ill-formed) HTML like the following:</p> <pre class="code html literal-block">
This is what I like to do:
<span class="nt">&lt;ul&gt;</span>
   <span class="nt">&lt;li&gt;</span> Go to the movies
   <span class="nt">&lt;li&gt;</span> Read books
   <span class="nt">&lt;li&gt;</span> Sleep a <span class="nt">&lt;i&gt;</span>lot<span class="nt">&lt;/i&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre> <p>You want to present the translator with four different strings to translate: &quot;This is what I like to do&quot; (probably you don't want to include the colon); &quot;Go to the movies&quot;; &quot;Read books&quot;; &quot;Sleep a &lt;i&gt;lot&lt;/i&gt;&quot;. You don't want to present the translator with that entire block of HTML as just one giant string to translate.</p> <p>In this example, the <tt class="docutils literal">&lt;ul&gt;</tt> and <tt class="docutils literal">&lt;li&gt;</tt> tags <strong>separate</strong> blocks of natural language text into semantically distinct blocks that can (and should) be translated separately. The <tt class="docutils literal">&lt;i&gt;</tt> and <tt class="docutils literal">&lt;/i&gt;</tt>, on the other hand, do not; we don't want to tell the translator to translate &quot;Sleep a&quot; and &quot;lot&quot; separately!</p> <p>When making a callback on an element, the i18nize-templates lexers say whether that element separates natural language text or not.</p> <p>Note that while related to the concept of HTML inline elements, the implementation of natural language text separation is slightly different, due to the semantics of some of the HTML tags. For instance, <tt class="docutils literal">&lt;textarea&gt;</tt> is an inline element, but we consider it to separate natural language text (&quot;nltext&quot;) because text inside a textarea is semantically separate from the text before and after it. Likewise, we special case <tt class="docutils literal"><span class="pre">&lt;br&gt;&lt;br&gt;</span></tt> to separate natural language text, since semantically it's used by HTML authors as a synonym for <tt class="docutils literal">&lt;p&gt;</tt>.</p> <p>The rules for whether an element separates natural language text are subtle in the details but simple in broad outline:</p> <ul class="simple"> <li><strong>An HTML tag</strong>: yes for block elements, no for inline elements</li> <li><strong>A run of text between HTML tags</strong>: no, by definition; but yes inside cdata sections like <tt class="docutils literal">&lt;script&gt;</tt></li> <li><strong>A template variable</strong>: no</li> <li><strong>A template comment</strong>: yes (could have gone either way here)</li> <li><strong>A template block construct</strong>: yes</li> </ul> </div> <div class="section" id="sub-lexers"> <h3>Sub-lexers</h3> <p>Another complication for parsing natural language text inside HTML files and templated HTML files, is that elements such as tags and template variables can include natural language text internally:</p> <pre class="code html literal-block">
<span class="nt">&lt;img</span> <span class="na">title=</span><span>&quot;This is where I live&quot;</span> <span class="na">src=</span><span>&quot;...&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;div&gt;</span>{{ add_prefix(&quot;This is where I live&quot;) }}<span class="nt">&lt;/div&gt;</span>
</pre> <p>For this reason, the i18nize-templates driver uses two lexers. The main lexer emits elements from the doc. For each element it returns that might have natural language text inside of it, we call a sub-lexer on the subset of the element with natural language. In the above example, we'd call a lexer on the value of the <tt class="docutils literal">title</tt> attribute, and on the function argument to <tt class="docutils literal">add_prefix</tt>.</p> </div> <div class="section" id="rewriters"> <h3>Rewriters</h3> <p>The main driver of the &quot;i18nize&quot; process is the rewriter. The rewriter owns the lexer and sub-lexer, and uses them to find the location of blocks of natural language text within the document.</p> <p>Consider the following HTML:</p> <pre class="code html literal-block">
<span class="nt">&lt;p&gt;</span>Hi, <span class="nt">&lt;b&gt;</span>you<span class="nt">&lt;/b&gt;</span>.<span class="nt">&lt;/p&gt;&lt;p&gt;</span>How are you doing?<span class="nt">&lt;/p&gt;</span>
</pre> <p>The lexer will make the following callbacks to the rewriter:</p> <pre class="code python literal-block">
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'&lt;p&gt;'</span><span class="p">,</span>  <span class="n">separates_nltext</span><span>=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'Hi, '</span><span class="p">,</span> <span class="n">separates_nltext</span><span>=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'&lt;b&gt;'</span><span class="p">,</span>  <span class="n">separates_nltext</span><span>=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'you'</span><span class="p">,</span>  <span class="n">separates_nltext</span><span>=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'&lt;/b&gt;'</span><span class="p">,</span> <span class="n">separates_nltext</span><span>=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'.'</span><span class="p">,</span>    <span class="n">separates_nltext</span><span>=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'&lt;/p&gt;'</span><span class="p">,</span> <span class="n">separates_nltext</span><span>=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'&lt;p&gt;'</span><span class="p">,</span>  <span class="n">separates_nltext</span><span>=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'How are you doing?'</span><span class="p">,</span> <span class="n">separates_nltext</span><span>=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span>'&lt;/p&gt;'</span><span class="p">,</span> <span class="n">separates_nltext</span><span>=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">callback_to_rewriter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">separates_nltext</span><span>=</span><span class="bp">True</span><span class="p">)</span>      <span># end-of-document</span>
</pre> <p>As a reminder, we want the rewriter to emit (assuming the document is a jinja2 template file):</p> <pre class="code html literal-block">
<span class="nt">&lt;p&gt;</span>{{ _(&quot;Hi, <span class="nt">&lt;b&gt;</span>you<span class="nt">&lt;/b&gt;</span>.&quot;) }}<span class="nt">&lt;/p&gt;&lt;p&gt;</span>{{ _(&quot;How are you doing?&quot;) }}<span class="nt">&lt;/p&gt;</span>
</pre> <p>Its algorithm is pretty simple: when it sees a segment with separates_nltext=False, it collects it up. Whenever it sees a segment with <tt class="docutils literal">separates_nltext=True</tt>, it concatenates together the previously collected-up segments, puts <tt class="docutils literal">{{ <span class="pre">_(&quot;...&quot;)</span> }}</tt> around the whole thing, and emits it. Then it also emits the separates_nltext text; stuff that separates natural-language runs is never marked up, and can always be emitted verbatim.</p> <p>This work is made (much) more complicated by various optimizations we put in to make life simpler for translators. For instance, for HTML like <tt class="docutils literal"><span class="pre">&lt;p&gt;hi&lt;/p&gt;\n</span></tt>, the newline is its own nl-text segment, but we don't want to emit <tt class="docutils literal">{{ <span class="pre">_(&quot;\n&quot;)</span> }}</tt> -- translators don't need to translate the newline character! Likewise, if the text is</p> <pre class="code html literal-block">
<span class="nt">&lt;b&gt;</span><span class="ni">&amp;lt;</span> Hi <span class="ni">&amp;gt;</span><span class="nt">&lt;/b&gt;</span>
</pre> <p>it's best to emit</p> <pre class="code html literal-block">
<span class="nt">&lt;b&gt;</span><span class="ni">&amp;lt;</span> {{ _(&quot;Hi&quot;) }} <span class="ni">&amp;gt;</span><span class="nt">&lt;/b&gt;</span>
</pre> <p>rather than</p> <pre class="code html literal-block">
{{ _(&quot;<span class="nt">&lt;b&gt;</span><span class="ni">&amp;lt;</span> Hi <span class="ni">&amp;gt;</span><span class="nt">&lt;/b&gt;</span>&quot;) }}
</pre> <p>-- there's no need to force the translators to copy over the bold tags and the punctuation. So there are regexps and rather complex logic to identify where &quot;actual natural language text&quot; starts and ends within a natural-language run.</p> <p>The work is also made more complicated by the syntactic changes that are needed for rewriting, especially for jinja2. The main problem is that variables are treated differently once we add the <tt class="docutils literal">_()</tt> around the text-to-be-translated:</p> <p class="label"><strong>sample input</strong></p> <pre class="code html literal-block">
Have {{days}} nice days!
</pre> <p class="label"><strong>sample output</strong></p> <pre class="code html literal-block">
_(&quot;Have %(days) nice days!&quot;, days=days)
</pre> <p>We also need to worry about arguments to functions and filters:</p> <pre class="code html literal-block">
{{ some_fn(&quot;text&quot;) }}
{{ somevar.serialize(&quot;text&quot;) }}
{{ somevar|serialize(&quot;text&quot;) }}
</pre> <p>Sometimes i18nize-templates just can't tell whether a string is natural language text or not. Consider this jinja2 snippet:</p> <pre class="code html literal-block">
Interested in the {{ myfn(&quot;title&quot;) }}}?
</pre> <p>Is &quot;title&quot; natural language text that needs to be translated? Or is it a label that <tt class="docutils literal">somefunc</tt> will use to look up the title of something? i18nize-templates can't know, so it just bails:</p> <pre class="code html literal-block">
_(&quot;Interested in the %(myfn)s?&quot;, myfn=myfn(_TODO(&quot;title&quot;)))
</pre> <p>The person running i18nize-templates will have to manually decide whether the <tt class="docutils literal">_TODO()</tt> should be removed or replaced with <tt class="docutils literal">_()</tt>.</p> </div> </div> <div class="section" id="optimizations"> <h2>Optimizations</h2> <p>i18nize-templates takes some effort to make life easier for both translators and for the person marking up the files with natural language text.</p> <p>For translators, i18nize-templates tries hard to reduce the size of the text to be translated, as in the example above where the <tt class="docutils literal">&lt;b&gt;</tt> and <tt class="docutils literal">&amp;lt;</tt> were not included in the text-to-be-translated. It does this by hard-coding rules about which entities are alphabetical and which are not, and likewise what trailing punctuation is part of natural language text (<cite>.</cite>, <cite>?</cite>, etc.) and what is not (<cite>^</cite>, <cite>*</cite>, etc).</p> <p>For the person marking up the files, i18nize-templates hard-codes some logic about whether template function arguments are natural language text or not. For instance, it knows that the argument to the jinja2 <tt class="docutils literal">groupby</tt> function is not natural language. Likewise, it knows that for any jinja2 function that takes a <tt class="docutils literal">style</tt> argument, that argument is the name of a CSS style and not natural language text (even though style names may look like natural language names).</p> <p>i18nize-templates has some customization functions to tell it that particular HTML tag attributes do or do not have natural language text, as well as particular template functions. You can also mark certain function parameters, or even function argument values, as not being natural language text. For instance, for <tt class="docutils literal"><span class="pre">myfunc(url=&quot;http://example.com&quot;)</span></tt>, there are three different ways to say that <tt class="docutils literal"><span class="pre">http://example.com</span></tt> is not nl-text: you could say <tt class="docutils literal">myfunc</tt> has no natural language arguments, you could say parameters named <tt class="docutils literal">url</tt> never have natural language values, or you could say arguments matching <tt class="docutils literal"><span class="pre">http://.*</span></tt> are never natural language.</p> <p>If i18nize-templates marks a certain bit of text to be translated, but it really shouldn't be, then you can tell i18nize-templates to leave it alone:</p> <pre class="code html literal-block">
{{ i18n_do_not_translate(&quot;Khan Academy:&quot;) }} Funtime!
</pre> <p>You will need to register a function <cite>i18n_do_not_translate</cite> with your template engine that is a no-op. In Khan Academy, we do the following:</p> <pre class="code python literal-block">
<span class="n">webapp2_extras</span><span>.</span><span class="n">jinja2</span><span>.</span><span class="n">default_config</span> <span>=</span> <span class="p">{</span>
  <span>&quot;template_path&quot;</span><span class="p">:</span> <span>...</span>
  <span>&quot;globals&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span>&quot;i18n_do_not_translate&quot;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">jinja2</span><span>.</span><span class="n">Markup</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span>...</span>
  <span class="p">}</span>
  <span>...</span>
<span class="p">}</span>
</pre> </div> <div class="section" id="summary"> <h2>Summary</h2> <p>When Khan Academy converted our website from being all in English to including i18n markup, i18nize-templates saved many man-months of tedious work. We used it for straight HTML files, jinja2, and handlebars, and should be easy to extend to other HTML template languages as well.</p> <p>Since our conversion completed, i18nize-templates has found a second life as a templated-HTML lexer. It has proven particularly useful at extracting natural language text out of (possibly templated) HTML files. We've also used it as an easy way to extract JavaScript out of templated HTML files.</p> </div> </div> </div> </article> <div class="keep-reading-buttons"> <div class="keep-reading-cell keep-reading-left"> <div class="button prev-post-button team-web-frontend"> <div class="header">previous post</div> <a href="/posts/making-thumbnails-fast.htm" class="post-title">Making thumbnails fast</a> </div> </div> <div class="keep-reading-cell keep-reading-right"> <div class="button next-post-button team-infrastructure"> <div class="header">next post</div> <a href="/posts/translation-server.htm" class="post-title">Schrödinger&#x27;s deploys no more: how we update translations</a> </div> </div> </div> </main> <script>document.getElementById("mobile-menu-button").onclick=function(){var e=document.body,t=document.getElementById("left-bar"),a=document.getElementById("content");"mobile-visible"===t.className?(e.className="",t.className="",a.className=""):(e.className="mobile-menu-visible",t.className="mobile-visible",a.className="mobile-hidden")};var totallyActivated=!1;document.getElementById("activate-tota11y").onclick=function(){if(totallyActivated)console.log("Tota11y already activated. Doing nothing.");else{var e=document.createElement("script");e.src="/javascript/tota11y.min.js",document.head.appendChild(e),totallyActivated=!0}},function(e,t,a,n,c,l,o){e.GoogleAnalyticsObject=c,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,l=t.createElement(a),o=t.getElementsByTagName(a)[0],l.async=1,l.src="//www.google-analytics.com/analytics.js",o.parentNode.insertBefore(l,o)}(window,document,"script",0,"ga"),ga("create","UA-65856931-1","auto"),ga("send","pageview");</script> </body> </html> 